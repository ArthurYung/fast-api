{"version":3,"sources":["router/index.tsx","components/Header.tsx","components/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["routes","path","component","lazy","RouteWithSubRoutes","route","exact","render","props","RouterView","fallback","map","i","key","NavBox","text","sub","to","color","ButtonBase","className","HEADER_PROPS_MAP","0","1","2","3","Header","pathname","this","location","navType","test","navProps","React","Component","withRouter","App","Footer","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+GAAA,2FAIMA,EAAsB,CAC1B,CACEC,KAAM,IACNC,UAAWC,eAAK,kBAAM,gCAExB,CACEF,KAAM,OACNC,UAAWC,eAAK,kBAAM,+BACtBH,OAAQ,CACN,CACEC,KAAM,aACNC,UAAWC,eAAK,kBAAM,mCAM9B,SAASC,EAAmBC,GAC1B,OACE,kBAAC,IAAD,CACEC,MAAsB,MAAfD,EAAMJ,KACbA,KAAMI,EAAMJ,KACZM,OAAQ,SAACC,GAAD,OAEN,kBAACH,EAAMH,UAAP,iBAAqBM,EAArB,CAA4BR,OAAQK,EAAML,aAMlD,IAAMS,EAAuB,kBAC3B,kBAAC,WAAD,CAAUC,SAAU,4CACjBV,EAAOW,IAAI,SAACN,EAAOO,GAClB,OAAO,kBAACR,EAAD,eAAoBS,IAAKD,GAAOP,S,4MCzBvCS,EAAgC,SAAC,GAAD,IACpCC,EADoC,EACpCA,KADoC,IAEpCC,WAFoC,MAE9B,WAF8B,EAGpCC,EAHoC,EAGpCA,GACAC,EAJoC,EAIpCA,MAJoC,OAMpC,kBAAC,IAAD,CAAMD,GAAIA,GACR,kBAACE,EAAA,EAAD,CAAYC,UAAW,cACrB,yBAAKA,UAAW,WAAaF,GAC3B,yBAAKE,UAAU,mBACb,wBAAIA,UAAU,gBAAgBL,GAC9B,yBAAKK,UAAU,mBAAmBJ,QAWtCK,EAAoD,CACxDC,EAAG,CACDP,KAAM,WACNE,GAAI,OACJC,MAAO,SAETK,EAAG,CACDR,KAAM,SACNE,GAAI,OACJC,MAAO,SAETM,EAAG,CACDT,KAAM,WACNE,GAAI,IACJC,MAAO,QAETO,EAAG,CACDV,KAAM,YACNE,GAAI,IACJC,MAAO,QAILQ,E,iLAEF,IAAMC,EAAmBC,KAAKpB,MAAMqB,SAASF,SACzCG,EAAkB,EACL,MAAbH,IACFG,EAAU,GAER,cAAcC,KAAKJ,KACrBG,EAAU,GAER,cAAcC,KAAKJ,KACrBG,EAAU,GAEZ,IAAME,EACJX,EAAiBS,IAAYT,EAAiB,GAChD,OACE,4BAAQD,UAAU,iBAChB,yBAAKA,UAAU,qBACb,kBAAC,EAAWY,S,GAlBDC,IAAMC,WAwBZC,cAAWT,GChFX,oBAA0B,8CCIpBU,E,iLAEjB,OACE,yBAAKhB,UAAW,OACd,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,0BAAMA,UAAW,eACf,kBAAC,IAAD,OAEF,kBAACiB,EAAD,Y,GATuBJ,IAAMC,W,MCOnBI,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MACvB,2DCZNC,IAASnC,OAAO,kBAAC,EAAD,MAASoC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.216dfbf3.chunk.js","sourcesContent":["import React, { Suspense, lazy } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { RouterMap } from \"./types\";\r\n\r\nconst routes: RouterMap[] = [\r\n  {\r\n    path: \"/\",\r\n    component: lazy(() => import(\"../page/home/App\"))\r\n  },\r\n  {\r\n    path: \"/api\",\r\n    component: lazy(() => import(\"../page/api/App\")),\r\n    routes: [\r\n      {\r\n        path: \"/api/:test\",\r\n        component: lazy(() => import(\"../page/api/Todo\"))\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nfunction RouteWithSubRoutes(route: RouterMap) {\r\n  return (\r\n    <Route\r\n      exact={route.path === \"/\"}\r\n      path={route.path}\r\n      render={(props: any) => (\r\n        // pass the sub-routes down to keep nesting\r\n        <route.component {...props} routes={route.routes} />\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\nconst RouterView: React.FC = () => (\r\n  <Suspense fallback={<div>loading...</div>}>\r\n    {routes.map((route, i) => {\r\n      return <RouteWithSubRoutes key={i} {...route} />;\r\n    })}\r\n  </Suspense>\r\n);\r\n\r\nexport { RouterView, RouteWithSubRoutes };\r\n","import React from \"react\";\r\n// eslint-disable-next-line\r\nimport { Link, withRouter, RouteComponentProps } from \"react-router-dom\";\r\nimport ButtonBase from \"@material-ui/core/ButtonBase\";\r\ninterface NavBoxProps {\r\n  text: string;\r\n  sub?: string;\r\n  to: string;\r\n  color: string;\r\n}\r\n\r\n// Render a NavBox Dom\r\nconst NavBox: React.FC<NavBoxProps> = ({\r\n  text,\r\n  sub = \"Click Me\",\r\n  to,\r\n  color\r\n}) => (\r\n  <Link to={to}>\r\n    <ButtonBase className={\"nav-button\"}>\r\n      <div className={\"nav-box \" + color}>\r\n        <div className=\"nav-box-content\">\r\n          <h3 className=\"nav-box-text\">{text}</h3>\r\n          <div className=\"nav-box-subText\">{sub}</div>\r\n        </div>\r\n      </div>\r\n    </ButtonBase>\r\n  </Link>\r\n);\r\n\r\n/**\r\n *  Render different Nav according to current pathname\r\n */\r\n\r\nconst HEADER_PROPS_MAP: { [type: number]: NavBoxProps } = {\r\n  0: {\r\n    text: \"FAST API\",\r\n    to: \"/api\",\r\n    color: \"black\"\r\n  },\r\n  1: {\r\n    text: \"ES API\",\r\n    to: \"/log\",\r\n    color: \"green\"\r\n  },\r\n  2: {\r\n    text: \"EDIT API\",\r\n    to: \"/\",\r\n    color: \"blue\"\r\n  },\r\n  3: {\r\n    text: \"CODE TEST\",\r\n    to: \"/\",\r\n    color: \"red\"\r\n  }\r\n};\r\n\r\nclass Header extends React.Component<RouteComponentProps> {\r\n  render() {\r\n    const pathname: string = this.props.location.pathname;\r\n    let navType: number = 0;\r\n    if (pathname === \"/\") {\r\n      navType = 0;\r\n    }\r\n    if (/^\\/api(\\/?)/.test(pathname)) {\r\n      navType = 1;\r\n    }\r\n    if (/^\\/log(\\/?)/.test(pathname)) {\r\n      navType = 2;\r\n    }\r\n    const navProps: NavBoxProps =\r\n      HEADER_PROPS_MAP[navType] || HEADER_PROPS_MAP[0];\r\n    return (\r\n      <header className=\"layout-header\">\r\n        <nav className=\"layout-header-nav\">\r\n          <NavBox {...navProps} />\r\n        </nav>\r\n      </header>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(Header);\r\n","import React from \"react\";\r\nexport default (): React.ReactElement => <footer>if footer</footer>;\r\n","import React from \"react\";\r\nimport { RouterView } from \"./router\";\r\nimport Header from \"./components/Header\";\r\nimport Footer from \"./components/Footer\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={\"app\"}>\r\n        <HashRouter>\r\n          <Header />\r\n          <main className={\"layout-main\"}>\r\n            <RouterView />\r\n          </main>\r\n          <Footer />\r\n        </HashRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./assets/css/index.scss\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}