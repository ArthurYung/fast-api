{"version":3,"sources":["components/Message.tsx","utils/codeInfoCache.ts","container/history.ts","utils/date.ts","components/ResultCard.tsx","components/CollectorList.tsx","components/HistoryView.tsx","page/api/Menu.tsx","page/api/App.tsx"],"names":["SnackBarIcon","type","Message","message","visible","closed","anchorOrigin","vertical","horizontal","autoHideDuration","open","onClose","event","reason","className","aria-describedby","id","CodeInfoCache","setCodeInfoCache","baseInfo","nameMap","getCodeInfoCache","getCodeInfoName","key","codeInfo","getNameMapCache","connect","state","historyData","history","dispatch","deleteTimer","timerInfo","deleteHistoryTimerData","setCurrCodeInfo","setCurrentCodeInfo","dateFormat","date","format","Boolean","flags","yyyy","Date","getFullYear","toString","mm","getMonth","slice","dd","getDate","HH","getHours","MM","getMinutes","SS","getSeconds","replace","match","MyCard","info","collectTimer","useState","setVisible","anchorEl","setAnchorEl","showMenu","resultClassName","status","handleClose","Grow","in","Card","CardHeader","avatar","Avatar","aria-label","action","IconButton","onClick","currentTarget","title","name","subheader","CardContent","children","map","childInfo","i","async","time","Divider","useTime","error","Menu","keepMounted","PaperProps","style","width","MenuItem","setTimeout","CollectorList","replayCollect","deleteCollect","collectorList","setCollectorList","handleGetList","a","getAllData","data","likedList","filter","item","liked","unLikedList","concat","collector","putData","useEffect","List","ListItem","FormControlLabel","control","Checkbox","icon","checkedIcon","checked","value","label","handleLiked","ListItemText","primary","secondary","edge","handleDelete","withRouter","drawer","setDrawer","messageInfo","setMessageInfo","showMessage","uid","indexOf","interpreter","getDatabaseInfo","databaseItem","addData","then","catch","err","String","deleteData","Fab","variant","ResultCard","Drawer","anchor","push","pathname","search","now","menuList","location","apiPathMatch","defaultTabId","setValue","matchId","Tabs","orientation","indicatorColor","onChange","e","Tab","MenuList","getApiMenuList","Test","routes","route","HistoryView"],"mappings":"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","file":"static/js/11.7a613dd1.chunk.js","sourcesContent":["import React, { SyntheticEvent } from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\nimport Warning from \"@material-ui/icons/Warning\";\nimport Error from \"@material-ui/icons/Error\";\nimport CheckCircle from \"@material-ui/icons/CheckCircle\";\nimport Info from \"@material-ui/icons/Info\";\n\ninterface MessageProps {\n  visible: boolean;\n  message: string;\n  type?: string;\n  closed: () => void;\n}\n\nconst SnackBarIcon: React.FC<{ type: string }> = ({ type }) => {\n  if (type === \"success\") {\n    return <CheckCircle />;\n  }\n  if (type === \"warn\") {\n    return <Warning />;\n  }\n  if (type === \"error\") {\n    return <Error />;\n  }\n  return <Info />;\n};\n\nconst Message: React.FC<MessageProps> = ({\n  message,\n  visible,\n  closed,\n  type = \"info\",\n}) => {\n  const handleClose = (event: SyntheticEvent | MouseEvent, reason?: string) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    closed();\n  };\n  return (\n    <span>\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"top\",\n          horizontal: \"right\",\n        }}\n        autoHideDuration={3000}\n        open={visible}\n        onClose={handleClose}\n        className={\"message-box-\" + type}\n      >\n        <SnackbarContent\n          className=\"message-content\"\n          aria-describedby=\"client-snackbar\"\n          message={\n            <span id=\"client-snackbar\" className=\"message-content-txt\">\n              <SnackBarIcon type={type} />\n              {message}\n            </span>\n          }\n        />\n      </Snackbar>\n    </span>\n  );\n};\n\nexport default Message;\n","import { DatabaseCodeInfo } from \"./types\";\ntype CatchItem = {\n  baseInfo: DatabaseCodeInfo;\n  nameMap: NameMapCache;\n};\ntype NameMapCache = { [x: string]: string };\nconst CodeInfoCache: { [x: string]: CatchItem } = {};\n\nfunction setCodeInfoCache(baseInfo: DatabaseCodeInfo, nameMap: NameMapCache) {\n  CodeInfoCache[baseInfo.id] = { baseInfo: baseInfo, nameMap };\n}\nfunction delCodeInfoCache(id: string) {\n  delete CodeInfoCache[id];\n}\n\nfunction getCodeInfoCache(id: string) {\n  return CodeInfoCache[id].baseInfo;\n}\n\nfunction getNameMapCache(id: string) {\n  return CodeInfoCache[id].nameMap;\n}\n\nfunction getCodeInfoName(id: string, key: string) {\n  const codeInfo = getNameMapCache(id);\n  if (codeInfo) {\n    return codeInfo[key] || key;\n  }\n  return key;\n}\n\nexport {\n  setCodeInfoCache,\n  delCodeInfoCache,\n  getCodeInfoCache,\n  getCodeInfoName\n};\n","import { connect } from \"react-redux\";\nimport {\n  deleteHistoryTimerData,\n  TimerDataInfo,\n  setCurrentCodeInfo\n} from \"@/actions/history\";\nimport { DatabaseCodeInfo } from \"@/utils/types\";\n\nexport default connect(\n  (state: any) => {\n    return { historyData: state.history };\n  },\n  (dispatch: any) => ({\n    deleteTimer(timerInfo: TimerDataInfo) {\n      dispatch(deleteHistoryTimerData(timerInfo));\n    },\n    setCurrCodeInfo(codeInfo: DatabaseCodeInfo) {\n      dispatch(setCurrentCodeInfo(codeInfo));\n    }\n  })\n);\n","export function dateFormat(date?: Date | number, format?: string): string {\n  let token = /d{1,4}|m{1,4}|yy(?:yy)?|H{1,2}|M{1,2}|S{1,2}/g;\n  if (Boolean(date)) {\n    date = date instanceof Date ? date : new Date(date as number);\n    let flags: { [x: string]: string } = {\n      yyyy: date.getFullYear().toString(),\n      mm: (\"0\" + (date.getMonth() + 1)).slice(-2),\n      dd: (\"0\" + date.getDate()).slice(-2),\n      HH: (\"0\" + date.getHours()).slice(-2),\n      MM: (\"0\" + date.getMinutes()).slice(-2),\n      SS: (\"0\" + date.getSeconds()).slice(-2)\n    };\n    if (!format) {\n      // 默认显示格式\n      format = \"yyyy-mm-dd HH:MM:SS\";\n    }\n    format = format.replace(token, function(match: string) {\n      if (match in flags) {\n        return flags[match];\n      }\n      return \"\";\n    });\n    return format;\n  }\n  return \"\";\n}\n","import React, { useState } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Grow from \"@material-ui/core/Grow\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport Check from \"@material-ui/icons/Check\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Divider from \"@material-ui/core/Divider\";\n\nimport { TimerDataInfo, TimerChild } from \"@/actions/history\";\nimport { dateFormat } from \"@/utils/date\";\n\ninterface FcProps {\n  info: TimerDataInfo;\n  collectTimer: (info: TimerDataInfo) => void;\n  deleteTimer: (timerInfo: TimerDataInfo) => void;\n}\n\nconst MyCard: React.FC<FcProps> = ({ info, deleteTimer, collectTimer }) => {\n  const [visible, setVisible] = useState<number>(1);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const showMenu = Boolean(anchorEl);\n  const resultClassName = info.status === 2 ? \"result-error\" : \"result-success\";\n\n  function openSettingMenu(event: React.MouseEvent<HTMLElement>) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n  function deleteCurrInfo() {\n    setVisible(0);\n    handleClose();\n    setTimeout(() => deleteTimer(info), 300);\n  }\n\n  function saveCurrentInfo() {\n    handleClose();\n    collectTimer(info);\n  }\n\n  return (\n    <aside className=\"result-card\">\n      <Grow in={Boolean(visible)}>\n        <Card>\n          <CardHeader\n            avatar={\n              <Avatar aria-label=\"recipe\" className={resultClassName}>\n                {info.status === 1 ? <Check /> : <Clear />}\n              </Avatar>\n            }\n            action={\n              <IconButton aria-label=\"settings\" onClick={openSettingMenu}>\n                <MoreVertIcon />\n              </IconButton>\n            }\n            title={info.name}\n            subheader={dateFormat(info.date, \"mm-dd HH:MM:SS\")}\n            className=\"result-card-header\"\n          />\n          <CardContent>\n            {info.children.map((childInfo: TimerChild, i: number) => (\n              <div className=\"result-card-item\" key={i}>\n                <span\n                  className={\n                    childInfo.async ? \"card-item-root async\" : \"card-item-root\"\n                  }\n                >\n                  {childInfo.name}\n                </span>\n                <span className=\"card-item-time\">{childInfo.time}ms</span>\n              </div>\n            ))}\n          </CardContent>\n          <Divider />\n          <CardContent>\n            {info.status === 1 ? (\n              <div className=\"result-active-success\">use: {info.useTime}ms</div>\n            ) : (\n              <div className=\"result-active-error\">{info.error}</div>\n            )}\n          </CardContent>\n        </Card>\n      </Grow>\n      <Menu\n        id=\"long-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={showMenu}\n        onClose={handleClose}\n        PaperProps={{\n          style: {\n            width: 120\n          }\n        }}\n      >\n        <MenuItem onClick={saveCurrentInfo}>Collect</MenuItem>\n        <MenuItem onClick={deleteCurrInfo}>Delete</MenuItem>\n      </Menu>\n    </aside>\n  );\n};\n\nexport default MyCard;\n","import React, { useEffect, useState } from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { DatabaseItem } from \"@/utils/types\";\nimport { getAllData, putData } from \"@/utils/indexDB\";\nimport { dateFormat } from \"@/utils/date\";\nimport Delete from \"@material-ui/icons/Delete\";\nimport PlayCircleFilled from \"@material-ui/icons/PlayCircleFilled\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport StarBorder from \"@material-ui/icons/StarBorder\";\nimport Star from \"@material-ui/icons/Star\";\ninterface CollectorProps {\n  replayCollect: (item: DatabaseItem) => void;\n  deleteCollect: (item: DatabaseItem) => Promise<1 | 0>;\n}\n\nconst CollectorList: React.FC<CollectorProps> = ({\n  replayCollect,\n  deleteCollect\n}) => {\n  const [collectorList, setCollectorList] = useState<DatabaseItem[]>([]);\n  useEffect(() => {\n    handleGetList();\n  }, []);\n  async function handleGetList() {\n    const { data } = await getAllData();\n    if (data) {\n      const likedList = data.filter((item: DatabaseItem) => {\n        return item.liked;\n      });\n      const unLikedList = data.filter((item: DatabaseItem) => {\n        return !item.liked;\n      });\n      setCollectorList(likedList.concat(unLikedList));\n    }\n  }\n  async function handleDelete(info: DatabaseItem) {\n    const result = await deleteCollect(info);\n    if (result !== 1) return;\n    handleGetList();\n  }\n  async function handleLiked(collector: DatabaseItem) {\n    collector.liked = !collector.liked;\n    await putData(collector);\n    await handleGetList();\n  }\n  return (\n    <aside className=\"collector-box\">\n      <List>\n        {collectorList.map((collector: DatabaseItem) => (\n          <ListItem key={collector.id}>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  icon={<StarBorder />}\n                  checkedIcon={<Star />}\n                  checked={collector.liked}\n                  value=\"checkedH\"\n                />\n              }\n              label=\"\"\n              onClick={() => handleLiked(collector)}\n            />\n            <ListItemText\n              primary={collector.timerInfo.name}\n              secondary={dateFormat(collector.timerInfo.date)}\n            />\n            <IconButton\n              edge=\"end\"\n              aria-label=\"play\"\n              onClick={() => replayCollect(collector)}\n            >\n              <PlayCircleFilled />\n            </IconButton>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"delete\"\n              onClick={() => handleDelete(collector)}\n            >\n              <Delete />\n            </IconButton>\n          </ListItem>\n        ))}\n      </List>\n    </aside>\n  );\n};\n\nexport default CollectorList;\n","import React, { Fragment, useState } from \"react\";\nimport connect from \"../container/history\";\nimport { TimerDataInfo } from \"../actions/history\";\nimport { DatabaseItem, DatabaseCodeInfo } from \"@/utils/types\";\nimport ResultCard from \"./ResultCard\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport CollectorList from \"./CollectorList\";\nimport Message from \"./Message\";\nimport interpreter from \"@/utils/baseStatement\";\nimport { addData, deleteData } from \"@/utils/indexDB\";\nimport { getCodeInfoCache } from \"@/utils/codeInfoCache\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\ninterface FcProps extends RouteComponentProps {\n  historyData: TimerDataInfo[];\n  deleteTimer: (timerInfo: TimerDataInfo) => void;\n  setCurrCodeInfo: (codeInfo: DatabaseCodeInfo) => void;\n}\n\ninterface MessageInfo {\n  type: string;\n  message: string;\n  visible: boolean;\n}\n\nconst HistoryView: React.FC<FcProps> = ({\n  historyData,\n  deleteTimer,\n  history,\n  setCurrCodeInfo\n}) => {\n  const [drawer, setDrawer] = useState<boolean>(false);\n  const [messageInfo, setMessageInfo] = useState<MessageInfo>({\n    type: \"success\",\n    visible: false,\n    message: \"\"\n  });\n  function handleCloseDrawer() {\n    setDrawer(false);\n  }\n  function handleOpenDrawer() {\n    setDrawer(true);\n  }\n  function showMessage({ type, message }: { type: string; message: string }) {\n    setMessageInfo({\n      type,\n      message,\n      visible: true\n    });\n  }\n  function closeMessage() {\n    setMessageInfo({\n      ...messageInfo,\n      visible: false\n    });\n  }\n  function collectTimer(info: TimerDataInfo) {\n    const codeInfo =\n      info.uid.indexOf(\"code\") > -1\n        ? getCodeInfoCache(info.uid)\n        : interpreter.getDatabaseInfo(info.uid);\n    const databaseItem = {\n      timerInfo: info,\n      codeInfo: codeInfo,\n      type: codeInfo.type,\n      liked: false\n    };\n    addData(databaseItem)\n      .then(() => {\n        showMessage({\n          type: \"success\",\n          message: \"Saved timer record\"\n        });\n      })\n      .catch((err: any) => {\n        showMessage({\n          type: \"warn\",\n          message: String(err)\n        });\n      });\n  }\n\n  function replayCollect(item: DatabaseItem) {\n    if (item.type === 1) {\n      history.push({\n        pathname: \"/custom\",\n        search: \"?type=1\" + Date.now()\n      });\n    } else if (item.type === 2) {\n      history.push({\n        pathname: \"/custom\",\n        search: \"?type=2\" + Date.now()\n      });\n      setCurrCodeInfo(item.codeInfo);\n    } else if (item.type === 3) {\n      history.push({\n        pathname: \"/code\"\n      });\n    }\n    setCurrCodeInfo(item.codeInfo);\n    setDrawer(false);\n  }\n\n  async function deleteCollect(item: DatabaseItem) {\n    if (!item.id) return 0;\n    const { error } = await deleteData(item.id);\n    if (error) {\n      showMessage({\n        type: \"error\",\n        message: (error as ErrorEvent).message\n      });\n      return 0;\n    }\n    return 1;\n  }\n\n  return (\n    <Fragment>\n      <aside className=\"history-box\">\n        <div className=\"collector-button\">\n          <Fab variant=\"extended\" aria-label=\"open\" onClick={handleOpenDrawer}>\n            <KeyboardArrowLeft />\n            Open Collector\n          </Fab>\n        </div>\n        {historyData.map((timerInfo: TimerDataInfo) => (\n          <ResultCard\n            key={timerInfo.id}\n            info={timerInfo}\n            deleteTimer={deleteTimer}\n            collectTimer={collectTimer}\n          />\n        ))}\n      </aside>\n      <Drawer anchor=\"right\" open={drawer} onClose={handleCloseDrawer}>\n        <CollectorList\n          replayCollect={replayCollect}\n          deleteCollect={deleteCollect}\n        />\n      </Drawer>\n      <Message\n        visible={messageInfo.visible}\n        type={messageInfo.type}\n        closed={closeMessage}\n        message={messageInfo.message}\n      />\n    </Fragment>\n  );\n};\n\nexport default connect(withRouter(HistoryView));\n","import React, { useState, useEffect } from \"react\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\ninterface ApiMenuInfo {\n  name: string;\n  id: string;\n}\ninterface MenuProps extends RouteComponentProps {\n  menuList: ApiMenuInfo[];\n  location: any;\n}\n\nconst Menu: React.FC<MenuProps> = ({ history, menuList, location }) => {\n  const apiPathMatch = /^\\/api\\/(\\d+)/;\n  const defaultTabId = menuList[0].id;\n  const [value, setValue] = useState(defaultTabId);\n\n  useEffect(() => {\n    const matchId = location.pathname.match(apiPathMatch);\n    if (!matchId) {\n      history.replace(\"/api/\" + defaultTabId);\n    } else {\n      setValue(matchId[1]);\n    }\n  }, [location.pathname, history, defaultTabId, apiPathMatch]);\n\n  function handleChange(e: any, value: string) {\n    history.push(\"/api/\" + value);\n  }\n\n  return (\n    <div className={\"api-menu\"}>\n      <Tabs\n        orientation=\"vertical\"\n        variant=\"scrollable\"\n        indicatorColor=\"primary\"\n        value={value}\n        onChange={handleChange}\n        aria-label=\"Vertical tabs example\"\n      >\n        {menuList.map(({ name, id }: ApiMenuInfo, i) => (\n          <Tab key={id} label={name} value={id} />\n        ))}\n      </Tabs>\n    </div>\n  );\n};\n\nexport default withRouter(Menu);\n","import React from \"react\";\nimport { RouteWithSubRoutes } from \"@/router/index\";\nimport { RouterMap } from \"@/router/types\";\nimport Menu from \"./Menu\";\nimport interpreter from \"@/utils/baseStatement\";\nimport HistoryView from \"@/components/HistoryView\";\nconst MenuList = interpreter.getApiMenuList();\n\nconst Test = ({ routes }: { routes: RouterMap[] }) => {\n  return (\n    <div className={\"api-box\"}>\n      <Menu menuList={MenuList} />\n      <div className={\"api-view\"}>\n        <div className={\"api-context\"}>\n          {routes.map((route: RouterMap, i: number) => (\n            <RouteWithSubRoutes key={i} {...route} />\n          ))}\n        </div>\n        <HistoryView />\n      </div>\n    </div>\n  );\n};\nexport default Test;\n"],"sourceRoot":""}