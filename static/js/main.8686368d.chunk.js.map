{"version":3,"sources":["actions/history.ts","utils/loopCode.ts","utils/baseTimer.ts","utils/mock.ts","utils/baseStatement.ts","actions/home.ts","utils/common.ts","utils/indexDB.ts","router/index.tsx","components/Header.tsx","components/Footer.tsx","components/Progress.tsx","container/progress.ts","reducer/index.ts","reducer/baseApi.ts","reducer/progress.ts","reducer/history.ts","store.ts","App.tsx","serviceWorker.ts","template/api.tsx","index.tsx"],"names":["HISTORY_RESULT","DELETE_TIMER","updateHistoryResultData","timerData","type","payload","deleteHistoryTimerData","BaseCodeMap","__for","code","__for_less","__while","__while_less","__forEach","init","__map","__reduce","_uid","tempTimer","__initApiInfo","uid","currId","date","Date","now","name","startTime","endTime","useTime","status","id","__parseTimerInfo","info","children","parentId","root","beginTimer","timerInfo","window","performance","runError","message","error","endTimer","mock","Mock","mockObj","obj","mockData","Object","keys","forEach","key","arr","$n","Array","numArr","array","i","push","mockArr","objArr","BASE_EXPRESSION_MATCH","interpreter","_api","_id","_apiMap","_customApiMap","this","expression","_getId","baseCode","initCode","loop","fn","apiList","templateList","__root__","baseTemplateList","apiInfo","getBaseApiInfo","pushBaseApiInfo","_initBaseApiInfo","expressionData","match","_beforeCode","_loopName","_defineRoot","_isUsedApi","_apiParams","runtimeStatement","runtimeCode","join","loopInfo","loopCodeMap","replace","runtimeFn","bodyCode","num","funStr","Function","__createFunction","map","console","log","PROGRESS_STATUS","UpdateProgress","ColorMap","success","not","color","currentDB","StoreName","keyPath","DBName","connectStatus","awaitRequestQueue","returnReject","Promise","reject","_execRequestQueue","_pushRequestQueue","initDB","connect","indexedDB","open","onsuccess","result","onerror","onupgradeneeded","objectStoreNames","contains","createObjectStore","autoIncrement","_getTransactionStore","transaction","objectStore","addData","databaseItem","resolve","awaitFn","request","add","e","data","target","routes","path","component","lazy","RouteWithSubRoutes","route","exact","render","props","RouterView","fallback","NavBox","text","sub","to","ButtonBase","className","HEADER_PROPS_MAP","0","1","2","3","Header","pathname","location","navType","test","navProps","React","Component","withRouter","state","progress","combineReducers","baseApi","action","concat","history","splice","index","indexOf","baseState","store","createStore","reducer","App","Footer","Boolean","hostname","apiInterpreter","for","for_less","while","while_less","reduce","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8686368d.chunk.js","sourcesContent":["export const HISTORY_RESULT = \"HISTORY_RESULT\";\nexport type HISTORY_RESULT = typeof HISTORY_RESULT;\nexport const DELETE_TIMER = \"DELETE_TIMER\";\nexport type DELETE_TIMER = typeof DELETE_TIMER;\n\nexport interface TimerDataInfo {\n  saved?: boolean;\n  uid: string;\n  id: string;\n  name: string;\n  root: boolean;\n  startTime: number;\n  endTime: number;\n  parentId: string | null;\n  status: number; // 0 - info, 1: success, 2: error\n  children: TimerDataInfo[];\n  useTime: number;\n  date: number;\n  error?: string;\n}\n\nexport interface HistoryActionType {\n  type: HISTORY_RESULT | DELETE_TIMER;\n  payload: TimerDataInfo;\n}\n\nexport function updateHistoryResultData(\n  timerData: TimerDataInfo\n): HistoryActionType {\n  return {\n    type: HISTORY_RESULT,\n    payload: timerData,\n  };\n}\n\nexport function deleteHistoryTimerData(\n  timerData: TimerDataInfo\n): HistoryActionType {\n  return {\n    type: DELETE_TIMER,\n    payload: timerData,\n  };\n}\n","const __for = {\n  code: `for (let i = 0; i < $n; i++) {\n  <body>\n}`,\n};\nconst __for_less = {\n  code: `for (let i = $n - 1; i >= 0; i--) {\n  <body>\n}`,\n};\nconst __while = {\n  code: `let i = 0; \nwhile(i < $n) {\n  i++; \n  <body>\n}`,\n};\nconst __while_less = {\n  code: `let i = $n;\nwhile(i--){\n  <body>\n}`,\n};\nconst __forEach = {\n  init: `let $Array = $mock.arr($n)`,\n  code: `$Array.forEach((_,$i) => {\n  <body>\n})`,\n};\nconst __map = {\n  init: `let $Array = $mock.arr($n)`,\n  code: `$Array.map((_,$i) => {\n  <body>\n})`,\n};\n\nconst __reduce = {\n  init: `let $Array = $mock.numArr($n)`,\n  code: `$Array.reduce(($pre, $cur) => {\n  <body>\n}, 0)`,\n};\n\ninterface baseCode {\n  init?: string;\n  code: string;\n}\nconst BaseCodeMap: { [x: string]: baseCode } = {\n  __for,\n  __for_less,\n  __while,\n  __while_less,\n  __forEach,\n  __map,\n  __reduce,\n};\n\nexport default BaseCodeMap;\n","import { TimerInfo } from \"./types\";\n\n/**\n * api测试打点简单，只需要插入一次打点，不需要介入ast遍历\n */\n\nlet _uid: number = 0;\nlet tempTimer: { [x: string]: defineApiInfo } = {};\n\ninterface defineApiInfo {\n  id: string;\n  startTime: number;\n  endTime: number;\n  useTime: number;\n  name: string;\n  date: number;\n  status: number;\n  uid: string;\n  error?: string;\n}\n\n/**\n * 创建一个唯一id\n */\nfunction createUid(): string {\n  return ++_uid + \"\";\n}\n\n/**\n * 清除之前工作树\n */\nfunction clearEmptyTimer() {\n  tempTimer = {};\n}\n\n/**\n * 初始化一个Timer Object\n */\nfunction __initApiInfo(uid: string): defineApiInfo {\n  const currId = createUid();\n  const date = Date.now();\n  tempTimer[currId] = {\n    name: \"\",\n    startTime: 0,\n    endTime: 0,\n    useTime: 0,\n    status: 0,\n    date,\n    id: currId,\n    uid\n  };\n\n  return tempTimer[currId];\n}\n\n/**\n * 补充timerInfo结构以便使用\n */\nfunction __parseTimerInfo(info: defineApiInfo): TimerInfo {\n  return {\n    ...info,\n    children: [],\n    parentId: null,\n    root: true\n  };\n}\n\n/**\n * 开始计时\n */\nfunction beginTimer(name: string, uid: string): string {\n  clearEmptyTimer();\n\n  const timerInfo = __initApiInfo(uid);\n\n  timerInfo.name = name;\n  timerInfo.startTime = window.performance.now();\n\n  return timerInfo.id;\n}\n\n/**\n * 错误情况\n */\nfunction runError(id: string, message: string) {\n  if (tempTimer[id]) {\n    tempTimer[id].status = 2;\n    tempTimer[id].error = message;\n  }\n}\n\n/**\n * 结束计时\n */\nfunction endTimer(id: string): TimerInfo {\n  const timerInfo: defineApiInfo = tempTimer[id];\n\n  timerInfo.endTime = window.performance.now();\n  timerInfo.useTime = timerInfo.endTime - timerInfo.startTime;\n\n  if (timerInfo.status === 0) {\n    timerInfo.status = 1;\n  }\n\n  return __parseTimerInfo(timerInfo);\n}\n\nexport { beginTimer, endTimer, runError };\n","import Mock from \"mockjs\";\n\nfunction arr($n: number): any[] {\n  return new Array($n);\n}\n\nfunction numArr($n: number): number[] {\n  const array: number[] = [];\n  for (let i = 0; i < $n; i++) {\n    array.push(i);\n  }\n  return array;\n}\n\nfunction mock(type: string) {\n  return Mock.mock(type);\n}\n\nfunction mockArr($n: number, type: string) {\n  const array: any[] = [];\n  for (let i = 0; i < $n; i++) {\n    array.push(mock(type));\n  }\n}\n\ntype MockObjType = {\n  [x: string]: \"string\" | \"number\" | \"boolean\" | \"function\" | \"name\" | \"time\";\n};\n\nfunction mockObj(obj: MockObjType) {\n  const mockData: any = {};\n  Object.keys(obj).forEach((key: string) => {\n    switch (obj[key]) {\n      case \"string\":\n        mockData[key] = Mock.mock({ \"string|1-10\": \"abc\" });\n        break;\n      case \"number\":\n        mockData[key] = Mock.mock({ \"number|10-100000\": 10 });\n        break;\n      case \"boolean\":\n        mockData[key] = Mock.mock({ \"boolean|1-2\": true });\n        break;\n      case \"function\":\n        mockData[key] = () => {};\n        break;\n      case \"name\":\n        mockData[key] = Mock.mock(\"@cname\");\n        break;\n      case \"time\":\n        mockData[key] = Mock.mock(\"@time\");\n      // eslint-disable-next-line\n      default:\n        break;\n    }\n    return mockData;\n  });\n}\n\nfunction objArr($n: number, obj: MockObjType) {\n  const array = [];\n  for (let i = 0; i < $n; i++) {\n    array.push(mockObj(obj));\n  }\n  return array;\n}\n\nexport default {\n  arr,\n  numArr,\n  mockArr,\n  objArr,\n  mock\n};\n","import loopCodeMap from \"./loopCode\";\nimport { BaseApiInfo, DatabaseCodeInfo } from \"./types\";\nimport { beginTimer, endTimer, runError } from \"./baseTimer\";\nimport Mock from \"./mock\";\n\nconst BASE_EXPRESSION_MATCH: RegExp = /^((.+?)\\|)?(<(.+?)>)?(@(.+?):)?(api)?(\\(\\((.+?)\\)\\))?/;\n\nfunction __createFunction(\n  initCode: string,\n  bodyCode: string,\n  name: string,\n  uid: string\n): Function {\n  return function(num: number) {\n    const funStr = `\n    try {\n      ${initCode ? initCode.replace(/(let|const)/g, \"var\") : \"\"}\n    } catch(e) {\n      return {error: e.message}\n    }\n\n    let _timeId = _newTime($name, _uid)\n    try {\n      ${bodyCode || \"\"}\n    } catch(e){\n      _runError(_timeId, e.message)\n    } finally {\n      let _result = _endTime(_timeId)\n      return _result\n    }\n  `;\n\n    // eslint-disable-next-line\n    const fn = new Function(\n      \"$n\",\n      \"$mock\",\n      \"$name\",\n      \"_newTime\",\n      \"_endTime\",\n      \"_runError\",\n      \"_uid\",\n      funStr\n    );\n    return fn(\n      num,\n      Mock,\n      name + \"(\" + num + \")\",\n      beginTimer,\n      endTimer,\n      runError,\n      uid\n    );\n  };\n}\n\ninterface apiTemplateList {\n  __root__?: string;\n  [x: string]: string | undefined;\n}\n\nclass Interpreter {\n  public _api: BaseApiInfo[];\n  public _id: number;\n  public _apiMap: { [x: string]: BaseApiInfo };\n  public _customApiMap: { [x: string]: BaseApiInfo };\n  constructor() {\n    this._api = [];\n    this._id = 0;\n    this._apiMap = {};\n    this._customApiMap = {};\n  }\n\n  private _getId() {\n    return ++this._id + \"\";\n  }\n\n  private _initBaseApiInfo(\n    expression: string,\n    key: string,\n    root?: string\n  ): BaseApiInfo {\n    const uid = this._getId();\n    return {\n      root,\n      id: uid,\n      key,\n      name: \"\",\n      baseCode: \"\",\n      initCode: \"\",\n      loop: true,\n      expression,\n      fn: () => {},\n    };\n  }\n\n  public init(apiList: apiTemplateList[]) {\n    apiList.forEach((templateList: apiTemplateList) => {\n      const { __root__, ...baseTemplateList } = templateList;\n\n      Object.keys(baseTemplateList).forEach((key: string) => {\n        const apiInfo = this.getBaseApiInfo(\n          baseTemplateList[key],\n          key,\n          __root__\n        );\n        this.pushBaseApiInfo(apiInfo);\n      });\n    });\n  }\n  pushBaseApiInfo(apiInfo?: BaseApiInfo) {\n    if (!apiInfo) return;\n    this._api.push(apiInfo);\n    this._apiMap[apiInfo.id] = apiInfo;\n  }\n  public getBaseApiInfo(\n    expression: string | undefined,\n    key: string,\n    __root__?: string\n  ) {\n    if (!expression) return;\n    const apiInfo = this._initBaseApiInfo(expression, key, __root__);\n    const expressionData = expression.match(BASE_EXPRESSION_MATCH) || [];\n\n    const _beforeCode = expressionData[2];\n    const _loopName = expressionData[4];\n    const _defineRoot = expressionData[6] || __root__;\n    const _isUsedApi = expressionData[7] && key;\n    const _apiParams = expressionData[9];\n\n    let runtimeStatement = [];\n    let runtimeCode = \"\";\n    let initCode = \"\";\n    let baseCode = \"\";\n\n    if (_defineRoot) {\n      runtimeStatement.push(_defineRoot);\n    }\n    if (_isUsedApi) {\n      runtimeStatement.push(_isUsedApi);\n    }\n\n    runtimeCode = runtimeStatement.join(\".\");\n\n    if (_apiParams) {\n      runtimeCode += `(${_apiParams})`;\n    }\n\n    if (_beforeCode) {\n      initCode = _beforeCode;\n    }\n\n    if (_loopName) {\n      const loopInfo = loopCodeMap[\"__\" + _loopName];\n      if (loopInfo) {\n        baseCode = loopInfo.code.replace(/<body>/, runtimeCode);\n        initCode = (loopInfo.init || \"\") + initCode;\n      }\n    } else {\n      baseCode = runtimeCode;\n    }\n\n    const name = __root__\n      ? __root__ === \"window\"\n        ? key\n        : [__root__, key].join(\".\")\n      : key;\n\n    const runtimeFn = __createFunction(initCode, baseCode, name, apiInfo.id);\n\n    apiInfo.initCode = initCode;\n    apiInfo.baseCode = baseCode;\n    apiInfo.root = _defineRoot;\n    apiInfo.name = name;\n    apiInfo.fn = runtimeFn;\n    return apiInfo;\n  }\n\n  public getApiMenuList(): { name: string; id: string }[] {\n    return this._api.map((apiInfo: BaseApiInfo) => {\n      return {\n        name: apiInfo.name,\n        id: apiInfo.id,\n      };\n    });\n  }\n\n  public getApiInfo(id: string): BaseApiInfo {\n    return this._apiMap[id];\n  }\n\n  public getDatabaseInfo(id: string): DatabaseCodeInfo {\n    console.log(this._customApiMap);\n    const apiInfo = this._apiMap[id] || this._customApiMap[id];\n    const { fn, ...databaseInfo } = apiInfo;\n    return databaseInfo;\n  }\n\n  public pushCustomApiInfo(info: BaseApiInfo) {\n    const id = info.id;\n    this._customApiMap[id] = info;\n  }\n}\n\nconst interpreter = new Interpreter();\n\nexport default interpreter;\n","export const ADD_TODO = \"ADD_TODO\";\nexport type ADD_TODO = typeof ADD_TODO;\n\nexport const PROGRESS_STATUS = \"PROGRESS_STATUS\";\nexport type PROGRESS_STATUS = typeof PROGRESS_STATUS;\n\nexport interface UpdateProgress {\n  type: PROGRESS_STATUS;\n  payload: boolean;\n}\n\nexport function UpdateProgress(status: boolean): UpdateProgress {\n  return {\n    type: PROGRESS_STATUS,\n    payload: status\n  };\n}\n","export const log = function(message: string, type: string = \"success\"): void {\n  const ColorMap: { [x: string]: string } = {\n    success: \"green\",\n    error: \"red\",\n    info: \"blue\",\n    not: \"gray\",\n  };\n  const color = ColorMap[type] || \"gray\";\n  console.log(`%c ${message}`, `color: ${color}`);\n};\n","import { log } from \"./common\";\nimport { DatabaseItem } from \"./types\";\n\nconst StoreName = \"history\";\nconst keyPath = \"id\";\nconst DBName = \"fast_api_timer\";\nlet connectStatus: number = 0; // DB连接状态\nlet currentDB: IDBDatabase | null; // 当前db名称\nlet awaitRequestQueue: Function[] = [];\n\nconst returnReject = () =>\n  Promise.reject({\n    error: \"IndexDB is not supported by your browser\",\n  });\n\nif (!window.indexedDB) {\n  connectStatus = -1;\n  log(\"IndexDB is not supported by your browser\", \"not\");\n}\n\nfunction _execRequestQueue() {\n  awaitRequestQueue.forEach((fn) => {\n    fn();\n  });\n  awaitRequestQueue = [];\n}\n\nfunction _pushRequestQueue(fn: Function) {\n  awaitRequestQueue.push(fn);\n}\n\nfunction initDB() {\n  if (connectStatus === -1) return;\n  const connect = window.indexedDB.open(DBName);\n  connect.onsuccess = function() {\n    log(\"connect success: \" + DBName);\n    connectStatus = 1;\n    currentDB = this.result;\n    _execRequestQueue();\n  };\n  connect.onerror = function() {\n    connectStatus = -1;\n    log(\"connect error\", \"error\");\n  };\n  connect.onupgradeneeded = function() {\n    connectStatus = 2;\n    currentDB = this.result;\n\n    if (!currentDB.objectStoreNames.contains(StoreName)) {\n      currentDB.createObjectStore(StoreName, {\n        autoIncrement: true,\n        keyPath: keyPath,\n      });\n      log(\"create success of objectStore: \" + StoreName);\n    }\n    _execRequestQueue();\n  };\n}\n\nfunction _getTransactionStore(): IDBObjectStore {\n  return (currentDB as IDBDatabase)\n    .transaction([StoreName], \"readwrite\")\n    .objectStore(StoreName);\n}\n\nfunction addData(databaseItem: DatabaseItem): Promise<any> {\n  log(\"addData\", \"info\");\n  if (connectStatus === -1) {\n    return returnReject();\n  }\n  return new Promise((resolve, reject) => {\n    const awaitFn = () => {\n      const objectStore = _getTransactionStore();\n      const request = objectStore.add(databaseItem);\n      request.onsuccess = function(e: Event) {\n        resolve({ data: (e.target as IDBRequest).result });\n      };\n      request.onerror = function(e: Event) {\n        reject({ error: e });\n      };\n    };\n    if (connectStatus === 0) {\n      _pushRequestQueue(awaitFn);\n    } else {\n      awaitFn();\n    }\n  });\n}\n\nfunction deleteData(id: string): Promise<any> {\n  log(\"deleteData\", \"info\");\n  if (connectStatus === -1) {\n    return returnReject();\n  }\n  return new Promise((resolve, reject) => {\n    const awaitFn = () => {\n      const objectStore = _getTransactionStore();\n      const request = objectStore.delete(id);\n      request.onsuccess = function(e: Event) {\n        resolve({ data: (e.target as IDBRequest).result });\n      };\n      request.onerror = function(e: Event) {\n        reject({ error: e });\n      };\n    };\n    if (connectStatus === 0) {\n      _pushRequestQueue(awaitFn);\n    } else {\n      awaitFn();\n    }\n  });\n}\n\nfunction getData(id: string): Promise<any> {\n  log(\"getData\", \"info\");\n  if (connectStatus === -1) {\n    return returnReject();\n  }\n  return new Promise((resolve, reject) => {\n    const awaitFn = () => {\n      const objectStore = _getTransactionStore();\n      const request = objectStore.get(id);\n      request.onsuccess = function(e: Event) {\n        resolve({ data: (e.target as IDBRequest).result });\n      };\n      request.onerror = function(e: Event) {\n        reject({ error: e });\n      };\n    };\n    if (connectStatus === 0) {\n      _pushRequestQueue(awaitFn);\n    } else {\n      awaitFn();\n    }\n  });\n}\n\nfunction getAllData(): Promise<any> {\n  log(\"getData\", \"info\");\n  if (connectStatus === -1) {\n    return returnReject();\n  }\n  return new Promise((resolve, reject) => {\n    const awaitFn = () => {\n      const objectStore = _getTransactionStore();\n      const request = objectStore.getAll();\n      request.onsuccess = function(e: Event) {\n        resolve({ data: (e.target as IDBRequest).result });\n      };\n      request.onerror = function(e: Event) {\n        reject({ error: e });\n      };\n    };\n    if (connectStatus === 0) {\n      _pushRequestQueue(awaitFn);\n    } else {\n      awaitFn();\n    }\n  });\n}\n\nexport { initDB, addData, deleteData, getData, getAllData };\n","import React, { Suspense, lazy } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { RouterMap } from \"./types\";\n\nconst routes: RouterMap[] = [\n  {\n    path: \"/\",\n    component: lazy(() => import(\"../page/home/App\")),\n  },\n  {\n    path: \"/api\",\n    component: lazy(() => import(\"../page/api/App\")),\n    routes: [\n      {\n        path: \"/api/:id\",\n        component: lazy(() => import(\"../page/api/View\")),\n      },\n    ],\n  },\n  {\n    path: \"/custom\",\n    component: lazy(() => import(\"../page/custom/App\")),\n  },\n];\n\nfunction RouteWithSubRoutes(route: RouterMap) {\n  return (\n    <Route\n      exact={route.path === \"/\"}\n      path={route.path}\n      render={(props: any) => (\n        // pass the sub-routes down to keep nesting\n        <route.component {...props} routes={route.routes} />\n      )}\n    />\n  );\n}\n\nconst RouterView: React.FC = () => (\n  <Suspense fallback={<div>loading...</div>}>\n    {routes.map((route, i) => {\n      return <RouteWithSubRoutes key={i} {...route} />;\n    })}\n  </Suspense>\n);\n\nexport { RouterView, RouteWithSubRoutes };\n","import React from \"react\";\n// eslint-disable-next-line\nimport { Link, withRouter, RouteComponentProps } from \"react-router-dom\";\nimport ButtonBase from \"@material-ui/core/ButtonBase\";\ninterface NavBoxProps {\n  text: string;\n  sub?: string;\n  to: string;\n  color: string;\n}\n\n// Render a NavBox Dom\nconst NavBox: React.FC<NavBoxProps> = ({\n  text,\n  sub = \"Click Me\",\n  to,\n  color,\n}) => (\n  <Link to={to}>\n    <ButtonBase className={\"nav-button\"}>\n      <div className={\"nav-box \" + color}>\n        <div className=\"nav-box-content\">\n          <h3 className=\"nav-box-text\">{text}</h3>\n          <div className=\"nav-box-subText\">{sub}</div>\n        </div>\n      </div>\n    </ButtonBase>\n  </Link>\n);\n\n/**\n *  Render different Nav according to current pathname\n */\n\nconst HEADER_PROPS_MAP: { [type: number]: NavBoxProps } = {\n  0: {\n    text: \"FAST API\",\n    to: \"/api\",\n    color: \"black\",\n  },\n  1: {\n    text: \"ES API\",\n    to: \"/custom\",\n    color: \"green\",\n  },\n  2: {\n    text: \"EDIT API\",\n    to: \"/\",\n    color: \"blue\",\n  },\n  3: {\n    text: \"CODE TEST\",\n    to: \"/\",\n    color: \"red\",\n  },\n};\n\nclass Header extends React.Component<RouteComponentProps> {\n  render() {\n    const pathname: string = this.props.location.pathname;\n    let navType: number = 0;\n    if (pathname === \"/\") {\n      navType = 0;\n    }\n    if (/^\\/api(\\/?)/.test(pathname)) {\n      navType = 1;\n    }\n    if (/^\\/log(\\/?)/.test(pathname)) {\n      navType = 3;\n    }\n    const navProps: NavBoxProps =\n      HEADER_PROPS_MAP[navType] || HEADER_PROPS_MAP[0];\n    return (\n      <header className=\"layout-header\">\n        <nav className=\"layout-header-nav\">\n          <NavBox {...navProps} />\n        </nav>\n      </header>\n    );\n  }\n}\nexport default withRouter(Header);\n","import React from \"react\";\nexport default (): React.ReactElement => <footer>if footer</footer>;\n","import React from \"react\";\nimport connect from \"@/container/progress\";\n\nconst Progress: React.FC<{ progress: boolean }> = props => {\n  return (\n    <article className=\"app-progress\">\n      {props.progress && <div className=\"app-progress-bar\" />}\n    </article>\n  );\n};\n\nexport default connect(Progress);\n","import { connect } from \"react-redux\";\n\nexport default connect((state: any) => ({ progress: state.progress }));\n","import { combineReducers } from \"redux\";\nimport baseApi from \"./baseApi\";\nimport progress from \"./progress\";\nimport history from \"./history\";\nexport default combineReducers({ baseApi, progress, history });\n","import { ADD_TODO } from \"@/actions/home\";\n\ninterface testAction {\n  type: ADD_TODO;\n  text: string;\n}\nexport default function baseApi(state: string[] = [], action: testAction) {\n  switch (action.type) {\n    case \"ADD_TODO\":\n      return state.concat([action.text]);\n    default:\n      return state;\n  }\n}\n","import { PROGRESS_STATUS, UpdateProgress } from \"../actions/home\";\n\nexport default function progress(\n  state: boolean = false,\n  action: UpdateProgress\n) {\n  switch (action.type) {\n    case PROGRESS_STATUS:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import {\n  HistoryActionType,\n  HISTORY_RESULT,\n  TimerDataInfo,\n  DELETE_TIMER,\n} from \"../actions/history\";\n\nexport default function progress(\n  state: TimerDataInfo[] = [],\n  action: HistoryActionType\n) {\n  switch (action.type) {\n    case HISTORY_RESULT:\n      return [action.payload].concat(state).splice(0, 99);\n    case DELETE_TIMER:\n      const index = state.indexOf(action.payload);\n      let baseState = [...state];\n      if (index > -1) {\n        baseState.splice(index, 1);\n      }\n      return baseState;\n    default:\n      return state;\n  }\n}\n","import reducer from \"./reducer\";\nimport { createStore } from \"redux\";\nconst store = createStore(reducer);\nexport default store;\n","import React from \"react\";\nimport { RouterView } from \"./router\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Progress from \"./components/Progress\";\nimport { HashRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className={\"app\"}>\n          <HashRouter>\n            <Progress />\n            <Header />\n            <main className={\"layout-main\"}>\n              <RouterView />\n            </main>\n            <Footer />\n          </HashRouter>\n        </div>\n      </Provider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const Loops = {\n  for: \"<for>\",\n  for_less: \"<for_less>\",\n  while: \"<while>\",\n  while_less: \"<while_less>\",\n  forEach: \"<forEach>\",\n  map: \"<map>\",\n  reduce: \"<reduce>\",\n  test: \"let $newArr = []|<for>@$newArr.push(i):\"\n};\n\nexport { Loops };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./assets/css/index.scss\";\nimport \"prismjs/themes/prism-tomorrow.css\";\nimport apiInterpreter from \"./utils/baseStatement\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Loops } from \"./template/api\";\nimport { initDB } from \"./utils/indexDB\";\n\napiInterpreter.init([Loops]);\ninitDB();\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}