{"version":3,"sources":["container/history.ts","utils/date.ts","components/ResultCard.tsx","components/HistoryView.tsx","page/api/Menu.tsx","page/api/App.tsx","components/Message.tsx"],"names":["connect","state","historyData","history","dispatch","deleteTimer","timerInfo","deleteHistoryTimerData","dateFormat","date","format","Boolean","flags","yyyy","Date","getFullYear","toString","mm","getMonth","slice","dd","getDate","HH","getHours","MM","getMinutes","SS","getSeconds","replace","match","MyCard","info","useState","visible","setVisible","anchorEl","setAnchorEl","type","message","messageInfo","setMessageInfo","showMenu","resultClassName","status","timerChildList","handleClose","showMessage","deepChild","child","root","forEach","push","name","useTime","children","length","className","Grow","in","Card","CardHeader","avatar","Avatar","aria-label","action","IconButton","onClick","event","currentTarget","title","subheader","CardContent","map","childInfo","i","key","Divider","error","Menu","id","keepMounted","open","onClose","PaperProps","style","width","MenuItem","databaseItem","codeInfo","interpreter","getDatabaseInfo","uid","addData","then","catch","err","String","setTimeout","Message","closed","saveTimer","ResultCard","withRouter","menuList","location","currentTabId","matchId","pathname","console","log","value","setValue","useEffect","Tabs","orientation","variant","indicatorColor","onChange","e","Tab","label","MenuList","getApiMenuList","Test","routes","route","HistoryView","SnackBarIcon","anchorOrigin","vertical","horizontal","autoHideDuration","reason","aria-describedby"],"mappings":"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","file":"static/js/8.f0f5fea6.chunk.js","sourcesContent":["import { connect } from \"react-redux\";\nimport { deleteHistoryTimerData, TimerDataInfo } from \"@/actions/history\";\n\nexport default connect(\n  (state: any) => ({ historyData: state.history }),\n  (dispatch: any) => ({\n    deleteTimer(timerInfo: TimerDataInfo) {\n      dispatch(deleteHistoryTimerData(timerInfo));\n    }\n  })\n);\n","export function dateFormat(date?: Date | number, format?: string): string {\n  let token = /d{1,4}|m{1,4}|yy(?:yy)?|H{1,2}|M{1,2}|S{1,2}/g;\n  if (Boolean(date)) {\n    date = date instanceof Date ? date : new Date(date as number);\n    let flags: { [x: string]: string } = {\n      yyyy: date.getFullYear().toString(),\n      mm: (\"0\" + (date.getMonth() + 1)).slice(-2),\n      dd: (\"0\" + date.getDate()).slice(-2),\n      HH: (\"0\" + date.getHours()).slice(-2),\n      MM: (\"0\" + date.getMinutes()).slice(-2),\n      SS: (\"0\" + date.getSeconds()).slice(-2)\n    };\n    if (!format) {\n      // 默认显示格式\n      format = \"yyyy-mm-dd HH:MM:SS\";\n    }\n    format = format.replace(token, function(match: string) {\n      if (match in flags) {\n        return flags[match];\n      }\n      return \"\";\n    });\n    return format;\n  }\n  return \"\";\n}\n","import React, { useState } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Grow from \"@material-ui/core/Grow\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport Check from \"@material-ui/icons/Check\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Message from \"./Message\";\nimport { addData } from \"@/utils/indexDB\";\nimport { TimerDataInfo } from \"@/actions/history\";\nimport { dateFormat } from \"@/utils/date\";\nimport interpreter from \"@/utils/baseStatement\";\ninterface ChildTimerInfo {\n  name: string;\n  useTime: number;\n}\n\ninterface FcProps {\n  info: TimerDataInfo;\n  saveTimer: () => void;\n  deleteTimer: (timerInfo: TimerDataInfo) => void;\n}\n\ninterface MessageInfo {\n  type: string;\n  message: string;\n  visible: boolean;\n}\n\nconst MyCard: React.FC<FcProps> = ({ info, deleteTimer }) => {\n  const [visible, setVisible] = useState<number>(1);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [messageInfo, setMessageInfo] = useState<MessageInfo>({\n    type: \"success\",\n    visible: false,\n    message: \"\",\n  });\n  const showMenu = Boolean(anchorEl);\n  const resultClassName = info.status === 2 ? \"result-error\" : \"result-success\";\n\n  const timerChildList: ChildTimerInfo[] = [];\n\n  function deepChild(child: TimerDataInfo[], root: string = \"\") {\n    child.forEach((info: TimerDataInfo) => {\n      timerChildList.push({\n        name: root + info.name,\n        useTime: info.useTime,\n      });\n      if (info.children.length) {\n        deepChild(info.children, info.name);\n      }\n    });\n  }\n\n  function openSettingMenu(event: React.MouseEvent<HTMLElement>) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n  function deleteCurrInfo() {\n    setVisible(0);\n    handleClose();\n    setTimeout(() => deleteTimer(info), 300);\n  }\n\n  function saveCurrentInfo() {\n    handleClose();\n    const databaseItem = {\n      timerInfo: info,\n      codeInfo: interpreter.getDatabaseInfo(info.uid),\n      type: 1,\n    };\n    addData(databaseItem)\n      .then(() => {\n        showMessage({\n          type: \"success\",\n          message: \"Saved timer record\",\n        });\n      })\n      .catch((err: any) => {\n        showMessage({\n          type: \"warn\",\n          message: String(err),\n        });\n      });\n  }\n\n  function showMessage({ type, message }: { type: string; message: string }) {\n    setMessageInfo({\n      type,\n      message,\n      visible: true,\n    });\n  }\n  function closeMessage() {\n    setMessageInfo({\n      ...messageInfo,\n      visible: false,\n    });\n  }\n\n  deepChild(info.children);\n  return (\n    <aside className=\"result-card\">\n      <Grow in={Boolean(visible)}>\n        <Card>\n          <CardHeader\n            avatar={\n              <Avatar aria-label=\"recipe\" className={resultClassName}>\n                {info.status === 1 ? <Check /> : <Clear />}\n              </Avatar>\n            }\n            action={\n              <IconButton aria-label=\"settings\" onClick={openSettingMenu}>\n                <MoreVertIcon />\n              </IconButton>\n            }\n            title={info.name}\n            subheader={dateFormat(info.date, \"mm-dd HH:MM:SS\")}\n            className=\"result-card-header\"\n          />\n          <CardContent>\n            {timerChildList.map((childInfo: ChildTimerInfo, i: number) => (\n              <div className=\"result-card-item\" key={i}>\n                <span className=\"card-item-root\">{childInfo.name}</span>\n                <span className=\"card-item-time\">{childInfo.useTime}ms</span>\n              </div>\n            ))}\n          </CardContent>\n          <Divider />\n          <CardContent>\n            {info.status === 1 ? (\n              <div className=\"result-active-success\">use: {info.useTime}ms</div>\n            ) : (\n              <div className=\"result-active-error\">{info.error}</div>\n            )}\n          </CardContent>\n        </Card>\n      </Grow>\n      <Menu\n        id=\"long-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={showMenu}\n        onClose={handleClose}\n        PaperProps={{\n          style: {\n            width: 120,\n          },\n        }}\n      >\n        <MenuItem onClick={saveCurrentInfo}>SaveDB</MenuItem>\n        <MenuItem onClick={deleteCurrInfo}>Delete</MenuItem>\n      </Menu>\n      <Message\n        visible={messageInfo.visible}\n        type={messageInfo.type}\n        closed={closeMessage}\n        message={messageInfo.message}\n      />\n    </aside>\n  );\n};\n\nexport default MyCard;\n","import React from \"react\";\nimport connect from \"../container/history\";\nimport { TimerDataInfo } from \"../actions/history\";\nimport ResultCard from \"./ResultCard\";\n\ninterface FcProps {\n  historyData: TimerDataInfo[];\n  deleteTimer: (timerInfo: TimerDataInfo) => void;\n}\n\nconst HistoryView: React.FC<FcProps> = ({ historyData, deleteTimer }) => {\n  function saveTimer() {}\n  return (\n    <aside className=\"history-box\">\n      {historyData.map((timerInfo: TimerDataInfo) => (\n        <ResultCard\n          key={timerInfo.id}\n          info={timerInfo}\n          deleteTimer={deleteTimer}\n          saveTimer={saveTimer}\n        />\n      ))}\n    </aside>\n  );\n};\n\nexport default connect(HistoryView);\n","import React, { useState, useEffect } from \"react\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\ninterface ApiMenuInfo {\n  name: string;\n  id: string;\n}\ninterface MenuProps extends RouteComponentProps {\n  menuList: ApiMenuInfo[];\n  location: any;\n}\n\nconst Menu: React.FC<MenuProps> = ({ history, menuList, location }) => {\n  const apiPathMatch = /^\\/api\\/(\\d+)/;\n  let currentTabId = menuList[0].id;\n\n  const matchId = location.pathname.match(apiPathMatch);\n  if (matchId) {\n    currentTabId = matchId[1];\n  }\n  console.log(currentTabId);\n  const [value, setValue] = useState(currentTabId);\n  useEffect(() => {\n    if (!matchId) {\n      history.replace(\"/api/\" + currentTabId);\n    }\n  }, [location, history, currentTabId, matchId]);\n\n  function handleChange(e: any, value: string) {\n    history.push(\"/api/\" + value);\n    setValue(value);\n  }\n  return (\n    <div className={\"api-menu\"}>\n      <Tabs\n        orientation=\"vertical\"\n        variant=\"scrollable\"\n        indicatorColor=\"primary\"\n        value={value}\n        onChange={handleChange}\n        aria-label=\"Vertical tabs example\"\n      >\n        {menuList.map(({ name, id }: ApiMenuInfo, i) => (\n          <Tab key={id} label={name} value={id} />\n        ))}\n      </Tabs>\n    </div>\n  );\n};\n\nexport default withRouter(Menu);\n","import React from \"react\";\nimport { RouteWithSubRoutes } from \"@/router/index\";\nimport { RouterMap } from \"@/router/types\";\nimport Menu from \"./Menu\";\nimport interpreter from \"@/utils/baseStatement\";\nimport HistoryView from \"@/components/HistoryView\";\nconst MenuList = interpreter.getApiMenuList();\n\nconst Test = ({ routes }: { routes: RouterMap[] }) => {\n  return (\n    <div className={\"api-box\"}>\n      <Menu menuList={MenuList} />\n      <div className={\"api-view\"}>\n        <div className={\"api-context\"}>\n          {routes.map((route: RouterMap, i: number) => (\n            <RouteWithSubRoutes key={i} {...route} />\n          ))}\n        </div>\n        <HistoryView />\n      </div>\n    </div>\n  );\n};\nexport default Test;\n","import React, { SyntheticEvent } from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\nimport Warning from \"@material-ui/icons/Warning\";\nimport Error from \"@material-ui/icons/Error\";\nimport CheckCircle from \"@material-ui/icons/CheckCircle\";\nimport Info from \"@material-ui/icons/Info\";\n\ninterface MessageProps {\n  visible: boolean;\n  message: string;\n  type?: string;\n  closed: () => void;\n}\n\nconst SnackBarIcon: React.FC<{ type: string }> = ({ type }) => {\n  if (type === \"success\") {\n    return <CheckCircle />;\n  }\n  if (type === \"warn\") {\n    return <Warning />;\n  }\n  if (type === \"error\") {\n    return <Error />;\n  }\n  return <Info />;\n};\n\nconst Message: React.FC<MessageProps> = ({\n  message,\n  visible,\n  closed,\n  type = \"info\",\n}) => {\n  const handleClose = (event: SyntheticEvent | MouseEvent, reason?: string) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    closed();\n  };\n  return (\n    <span>\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"top\",\n          horizontal: \"right\",\n        }}\n        autoHideDuration={3000}\n        open={visible}\n        onClose={handleClose}\n        className={\"message-box-\" + type}\n      >\n        <SnackbarContent\n          className=\"message-content\"\n          aria-describedby=\"client-snackbar\"\n          message={\n            <span id=\"client-snackbar\" className=\"message-content-txt\">\n              <SnackBarIcon type={type} />\n              {message}\n            </span>\n          }\n        />\n      </Snackbar>\n    </span>\n  );\n};\n\nexport default Message;\n"],"sourceRoot":""}