{"version":3,"sources":["container/history.ts","utils/date.ts","components/ResultCard.tsx","components/CollectorList.tsx","components/HistoryView.tsx","page/api/Menu.tsx","page/api/App.tsx","components/Message.tsx"],"names":["connect","state","historyData","history","dispatch","deleteTimer","timerInfo","deleteHistoryTimerData","dateFormat","date","format","Boolean","flags","yyyy","Date","getFullYear","toString","mm","getMonth","slice","dd","getDate","HH","getHours","MM","getMinutes","SS","getSeconds","replace","match","MyCard","info","collectTimer","useState","visible","setVisible","anchorEl","setAnchorEl","showMenu","resultClassName","status","timerChildList","handleClose","deepChild","child","root","forEach","push","name","useTime","children","length","className","Grow","in","Card","CardHeader","avatar","Avatar","aria-label","action","IconButton","onClick","event","currentTarget","title","subheader","CardContent","map","childInfo","i","key","Divider","error","Menu","id","keepMounted","open","onClose","PaperProps","style","width","MenuItem","setTimeout","CollectorList","replayCollect","deleteCollect","collectorList","setCollectorList","a","getAllData","data","useEffect","then","List","collector","ListItem","ListItemText","primary","secondary","edge","handleDelete","withRouter","drawer","setDrawer","type","message","messageInfo","setMessageInfo","showMessage","codeInfo","interpreter","getDatabaseInfo","uid","databaseItem","addData","catch","err","String","item","deleteData","Fab","variant","ResultCard","Drawer","anchor","pathname","search","now","Message","closed","menuList","location","currentTabId","matchId","console","log","value","setValue","Tabs","orientation","indicatorColor","onChange","e","Tab","label","MenuList","getApiMenuList","Test","routes","route","HistoryView","SnackBarIcon","anchorOrigin","vertical","horizontal","autoHideDuration","reason","aria-describedby"],"mappings":"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","file":"static/js/9.eacd6866.chunk.js","sourcesContent":["import { connect } from \"react-redux\";\nimport { deleteHistoryTimerData, TimerDataInfo } from \"@/actions/history\";\n\nexport default connect(\n  (state: any) => ({ historyData: state.history }),\n  (dispatch: any) => ({\n    deleteTimer(timerInfo: TimerDataInfo) {\n      dispatch(deleteHistoryTimerData(timerInfo));\n    }\n  })\n);\n","export function dateFormat(date?: Date | number, format?: string): string {\n  let token = /d{1,4}|m{1,4}|yy(?:yy)?|H{1,2}|M{1,2}|S{1,2}/g;\n  if (Boolean(date)) {\n    date = date instanceof Date ? date : new Date(date as number);\n    let flags: { [x: string]: string } = {\n      yyyy: date.getFullYear().toString(),\n      mm: (\"0\" + (date.getMonth() + 1)).slice(-2),\n      dd: (\"0\" + date.getDate()).slice(-2),\n      HH: (\"0\" + date.getHours()).slice(-2),\n      MM: (\"0\" + date.getMinutes()).slice(-2),\n      SS: (\"0\" + date.getSeconds()).slice(-2)\n    };\n    if (!format) {\n      // 默认显示格式\n      format = \"yyyy-mm-dd HH:MM:SS\";\n    }\n    format = format.replace(token, function(match: string) {\n      if (match in flags) {\n        return flags[match];\n      }\n      return \"\";\n    });\n    return format;\n  }\n  return \"\";\n}\n","import React, { useState } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Grow from \"@material-ui/core/Grow\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport Check from \"@material-ui/icons/Check\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Divider from \"@material-ui/core/Divider\";\n\nimport { TimerDataInfo } from \"@/actions/history\";\nimport { dateFormat } from \"@/utils/date\";\n\ninterface ChildTimerInfo {\n  name: string;\n  useTime: number;\n}\n\ninterface FcProps {\n  info: TimerDataInfo;\n  collectTimer: (info: TimerDataInfo) => void;\n  deleteTimer: (timerInfo: TimerDataInfo) => void;\n}\n\nconst MyCard: React.FC<FcProps> = ({ info, deleteTimer, collectTimer }) => {\n  const [visible, setVisible] = useState<number>(1);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const showMenu = Boolean(anchorEl);\n  const resultClassName = info.status === 2 ? \"result-error\" : \"result-success\";\n\n  const timerChildList: ChildTimerInfo[] = [];\n\n  function deepChild(child: TimerDataInfo[], root: string = \"\") {\n    child.forEach((info: TimerDataInfo) => {\n      timerChildList.push({\n        name: root + info.name,\n        useTime: info.useTime,\n      });\n      if (info.children.length) {\n        deepChild(info.children, info.name);\n      }\n    });\n  }\n\n  function openSettingMenu(event: React.MouseEvent<HTMLElement>) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n  function deleteCurrInfo() {\n    setVisible(0);\n    handleClose();\n    setTimeout(() => deleteTimer(info), 300);\n  }\n\n  function saveCurrentInfo() {\n    handleClose();\n    collectTimer(info);\n  }\n\n  deepChild(info.children);\n  return (\n    <aside className=\"result-card\">\n      <Grow in={Boolean(visible)}>\n        <Card>\n          <CardHeader\n            avatar={\n              <Avatar aria-label=\"recipe\" className={resultClassName}>\n                {info.status === 1 ? <Check /> : <Clear />}\n              </Avatar>\n            }\n            action={\n              <IconButton aria-label=\"settings\" onClick={openSettingMenu}>\n                <MoreVertIcon />\n              </IconButton>\n            }\n            title={info.name}\n            subheader={dateFormat(info.date, \"mm-dd HH:MM:SS\")}\n            className=\"result-card-header\"\n          />\n          <CardContent>\n            {timerChildList.map((childInfo: ChildTimerInfo, i: number) => (\n              <div className=\"result-card-item\" key={i}>\n                <span className=\"card-item-root\">{childInfo.name}</span>\n                <span className=\"card-item-time\">{childInfo.useTime}ms</span>\n              </div>\n            ))}\n          </CardContent>\n          <Divider />\n          <CardContent>\n            {info.status === 1 ? (\n              <div className=\"result-active-success\">use: {info.useTime}ms</div>\n            ) : (\n              <div className=\"result-active-error\">{info.error}</div>\n            )}\n          </CardContent>\n        </Card>\n      </Grow>\n      <Menu\n        id=\"long-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={showMenu}\n        onClose={handleClose}\n        PaperProps={{\n          style: {\n            width: 120,\n          },\n        }}\n      >\n        <MenuItem onClick={saveCurrentInfo}>Collect</MenuItem>\n        <MenuItem onClick={deleteCurrInfo}>Delete</MenuItem>\n      </Menu>\n    </aside>\n  );\n};\n\nexport default MyCard;\n","import React, { useEffect, useState } from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { DatabaseItem } from \"@/utils/types\";\nimport { getAllData } from \"@/utils/indexDB\";\nimport { dateFormat } from \"@/utils/date\";\nimport Delete from \"@material-ui/icons/Delete\";\nimport PlayCircleFilled from \"@material-ui/icons/PlayCircleFilled\";\n\ninterface CollectorProps {\n  replayCollect: (item: DatabaseItem) => void;\n  deleteCollect: (item: DatabaseItem) => Promise<1 | 0>;\n}\n\nconst CollectorList: React.FC<CollectorProps> = ({\n  replayCollect,\n  deleteCollect,\n}) => {\n  const [collectorList, setCollectorList] = useState<DatabaseItem[]>([]);\n  useEffect(() => {\n    getAllData().then((data) => {\n      setCollectorList(data.data);\n    });\n  }, []);\n  async function handleDelete(info: DatabaseItem) {\n    const result = await deleteCollect(info);\n    if (result !== 1) return;\n    const { data } = await getAllData();\n    if (data) setCollectorList(data);\n  }\n  return (\n    <aside className=\"collector-box\">\n      <List>\n        {collectorList.map((collector: DatabaseItem) => (\n          <ListItem key={collector.id}>\n            <ListItemText\n              primary={collector.timerInfo.name}\n              secondary={dateFormat(collector.timerInfo.date)}\n            />\n            <IconButton\n              edge=\"end\"\n              aria-label=\"play\"\n              onClick={() => replayCollect(collector)}\n            >\n              <PlayCircleFilled />\n            </IconButton>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"delete\"\n              onClick={() => handleDelete(collector)}\n            >\n              <Delete />\n            </IconButton>\n          </ListItem>\n        ))}\n      </List>\n    </aside>\n  );\n};\n\nexport default CollectorList;\n","import React, { Fragment, useState } from \"react\";\nimport connect from \"../container/history\";\nimport { TimerDataInfo } from \"../actions/history\";\nimport { DatabaseItem } from \"@/utils/types\";\nimport ResultCard from \"./ResultCard\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport CollectorList from \"./CollectorList\";\nimport Message from \"./Message\";\nimport interpreter from \"@/utils/baseStatement\";\nimport { addData, deleteData } from \"@/utils/indexDB\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\ninterface FcProps extends RouteComponentProps {\n  historyData: TimerDataInfo[];\n  deleteTimer: (timerInfo: TimerDataInfo) => void;\n}\n\ninterface MessageInfo {\n  type: string;\n  message: string;\n  visible: boolean;\n}\n\nconst HistoryView: React.FC<FcProps> = ({\n  historyData,\n  deleteTimer,\n  history,\n}) => {\n  const [drawer, setDrawer] = useState<boolean>(false);\n  const [messageInfo, setMessageInfo] = useState<MessageInfo>({\n    type: \"success\",\n    visible: false,\n    message: \"\",\n  });\n  function handleCloseDrawer() {\n    setDrawer(false);\n  }\n  function handleOpenDrawer() {\n    setDrawer(true);\n  }\n  function showMessage({ type, message }: { type: string; message: string }) {\n    setMessageInfo({\n      type,\n      message,\n      visible: true,\n    });\n  }\n  function closeMessage() {\n    setMessageInfo({\n      ...messageInfo,\n      visible: false,\n    });\n  }\n  function collectTimer(info: TimerDataInfo) {\n    const codeInfo = interpreter.getDatabaseInfo(info.uid);\n    const databaseItem = {\n      timerInfo: info,\n      codeInfo: codeInfo,\n      type: codeInfo.type,\n    };\n    addData(databaseItem)\n      .then(() => {\n        showMessage({\n          type: \"success\",\n          message: \"Saved timer record\",\n        });\n      })\n      .catch((err: any) => {\n        showMessage({\n          type: \"warn\",\n          message: String(err),\n        });\n      });\n  }\n\n  function replayCollect(item: DatabaseItem) {\n    if (item.type === 1) {\n      history.push({\n        state: item.codeInfo,\n        pathname: \"/custom\",\n        search: \"?type=1\" + Date.now(),\n      });\n    } else if (item.type === 2) {\n      history.push({\n        state: item.codeInfo,\n        pathname: \"/custom\",\n        search: \"?type=2\" + Date.now(),\n      });\n    }\n    setDrawer(false);\n  }\n\n  async function deleteCollect(item: DatabaseItem) {\n    if (!item.id) return 0;\n    const { error } = await deleteData(item.id);\n    if (error) {\n      showMessage({\n        type: \"error\",\n        message: error,\n      });\n      return 0;\n    }\n    return 1;\n  }\n\n  return (\n    <Fragment>\n      <aside className=\"history-box\">\n        <div className=\"collector-button\">\n          <Fab variant=\"extended\" aria-label=\"open\" onClick={handleOpenDrawer}>\n            <KeyboardArrowLeft />\n            Open Collector\n          </Fab>\n        </div>\n        {historyData.map((timerInfo: TimerDataInfo) => (\n          <ResultCard\n            key={timerInfo.id}\n            info={timerInfo}\n            deleteTimer={deleteTimer}\n            collectTimer={collectTimer}\n          />\n        ))}\n      </aside>\n      <Drawer anchor=\"right\" open={drawer} onClose={handleCloseDrawer}>\n        <CollectorList\n          replayCollect={replayCollect}\n          deleteCollect={deleteCollect}\n        />\n      </Drawer>\n      <Message\n        visible={messageInfo.visible}\n        type={messageInfo.type}\n        closed={closeMessage}\n        message={messageInfo.message}\n      />\n    </Fragment>\n  );\n};\n\nexport default connect(withRouter(HistoryView));\n","import React, { useState, useEffect } from \"react\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\ninterface ApiMenuInfo {\n  name: string;\n  id: string;\n}\ninterface MenuProps extends RouteComponentProps {\n  menuList: ApiMenuInfo[];\n  location: any;\n}\n\nconst Menu: React.FC<MenuProps> = ({ history, menuList, location }) => {\n  const apiPathMatch = /^\\/api\\/(\\d+)/;\n  let currentTabId = menuList[0].id;\n\n  const matchId = location.pathname.match(apiPathMatch);\n  if (matchId) {\n    currentTabId = matchId[1];\n  }\n  console.log(currentTabId);\n  const [value, setValue] = useState(currentTabId);\n  useEffect(() => {\n    if (!matchId) {\n      history.replace(\"/api/\" + currentTabId);\n    }\n  }, [location, history, currentTabId, matchId]);\n\n  function handleChange(e: any, value: string) {\n    history.push(\"/api/\" + value);\n    setValue(value);\n  }\n  return (\n    <div className={\"api-menu\"}>\n      <Tabs\n        orientation=\"vertical\"\n        variant=\"scrollable\"\n        indicatorColor=\"primary\"\n        value={value}\n        onChange={handleChange}\n        aria-label=\"Vertical tabs example\"\n      >\n        {menuList.map(({ name, id }: ApiMenuInfo, i) => (\n          <Tab key={id} label={name} value={id} />\n        ))}\n      </Tabs>\n    </div>\n  );\n};\n\nexport default withRouter(Menu);\n","import React from \"react\";\nimport { RouteWithSubRoutes } from \"@/router/index\";\nimport { RouterMap } from \"@/router/types\";\nimport Menu from \"./Menu\";\nimport interpreter from \"@/utils/baseStatement\";\nimport HistoryView from \"@/components/HistoryView\";\nconst MenuList = interpreter.getApiMenuList();\n\nconst Test = ({ routes }: { routes: RouterMap[] }) => {\n  return (\n    <div className={\"api-box\"}>\n      <Menu menuList={MenuList} />\n      <div className={\"api-view\"}>\n        <div className={\"api-context\"}>\n          {routes.map((route: RouterMap, i: number) => (\n            <RouteWithSubRoutes key={i} {...route} />\n          ))}\n        </div>\n        <HistoryView />\n      </div>\n    </div>\n  );\n};\nexport default Test;\n","import React, { SyntheticEvent } from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\nimport Warning from \"@material-ui/icons/Warning\";\nimport Error from \"@material-ui/icons/Error\";\nimport CheckCircle from \"@material-ui/icons/CheckCircle\";\nimport Info from \"@material-ui/icons/Info\";\n\ninterface MessageProps {\n  visible: boolean;\n  message: string;\n  type?: string;\n  closed: () => void;\n}\n\nconst SnackBarIcon: React.FC<{ type: string }> = ({ type }) => {\n  if (type === \"success\") {\n    return <CheckCircle />;\n  }\n  if (type === \"warn\") {\n    return <Warning />;\n  }\n  if (type === \"error\") {\n    return <Error />;\n  }\n  return <Info />;\n};\n\nconst Message: React.FC<MessageProps> = ({\n  message,\n  visible,\n  closed,\n  type = \"info\",\n}) => {\n  const handleClose = (event: SyntheticEvent | MouseEvent, reason?: string) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    closed();\n  };\n  return (\n    <span>\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"top\",\n          horizontal: \"right\",\n        }}\n        autoHideDuration={3000}\n        open={visible}\n        onClose={handleClose}\n        className={\"message-box-\" + type}\n      >\n        <SnackbarContent\n          className=\"message-content\"\n          aria-describedby=\"client-snackbar\"\n          message={\n            <span id=\"client-snackbar\" className=\"message-content-txt\">\n              <SnackBarIcon type={type} />\n              {message}\n            </span>\n          }\n        />\n      </Snackbar>\n    </span>\n  );\n};\n\nexport default Message;\n"],"sourceRoot":""}