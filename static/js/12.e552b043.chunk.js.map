{"version":3,"sources":["components/Message.tsx","utils/codeInfoCache.ts","container/history.ts","utils/date.ts","components/ResultCard.tsx","components/CollectorList.tsx","components/HistoryView.tsx","page/api/Menu.tsx","page/api/App.tsx"],"names":["SnackBarIcon","type","Message","message","visible","closed","anchorOrigin","vertical","horizontal","autoHideDuration","open","onClose","event","reason","className","aria-describedby","id","CodeInfoCache","setCodeInfoCache","baseInfo","nameMap","getCodeInfoCache","getCodeInfoName","key","codeInfo","getNameMapCache","connect","state","historyData","history","dispatch","deleteTimer","timerInfo","deleteHistoryTimerData","setCurrCodeInfo","setCurrentCodeInfo","dateFormat","date","format","Boolean","flags","yyyy","Date","getFullYear","toString","mm","getMonth","slice","dd","getDate","HH","getHours","MM","getMinutes","SS","getSeconds","replace","match","MyCard","info","collectTimer","useState","setVisible","anchorEl","setAnchorEl","showMenu","resultClassName","status","handleClose","Grow","in","Card","CardHeader","avatar","Avatar","aria-label","action","IconButton","onClick","currentTarget","title","name","subheader","CardContent","children","map","childInfo","i","async","time","Divider","useTime","error","Menu","keepMounted","PaperProps","style","width","MenuItem","setTimeout","CollectorList","replayCollect","deleteCollect","collectorList","setCollectorList","handleGetList","a","getAllData","data","likedList","filter","item","liked","unLikedList","concat","collector","putData","useEffect","List","ListItem","FormControlLabel","control","Checkbox","icon","checkedIcon","checked","value","label","handleLiked","ListItemText","primary","secondary","edge","handleDelete","withRouter","drawer","setDrawer","messageInfo","setMessageInfo","showMessage","uid","indexOf","interpreter","getDatabaseInfo","databaseItem","addData","then","catch","err","String","deleteData","Fab","variant","ResultCard","Drawer","anchor","push","pathname","search","now","menuList","location","apiPathMatch","defaultTabId","setValue","matchId","Tabs","orientation","indicatorColor","onChange","e","Tab","MenuList","getApiMenuList","Test","routes","route","HistoryView"],"mappings":"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","file":"static/js/12.e552b043.chunk.js","sourcesContent":["import React, { SyntheticEvent } from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\r\nimport Warning from \"@material-ui/icons/Warning\";\r\nimport Error from \"@material-ui/icons/Error\";\r\nimport CheckCircle from \"@material-ui/icons/CheckCircle\";\r\nimport Info from \"@material-ui/icons/Info\";\r\n\r\ninterface MessageProps {\r\n  visible: boolean;\r\n  message: string;\r\n  type?: string;\r\n  closed: () => void;\r\n}\r\n\r\nconst SnackBarIcon: React.FC<{ type: string }> = ({ type }) => {\r\n  if (type === \"success\") {\r\n    return <CheckCircle />;\r\n  }\r\n  if (type === \"warn\") {\r\n    return <Warning />;\r\n  }\r\n  if (type === \"error\") {\r\n    return <Error />;\r\n  }\r\n  return <Info />;\r\n};\r\n\r\nconst Message: React.FC<MessageProps> = ({\r\n  message,\r\n  visible,\r\n  closed,\r\n  type = \"info\",\r\n}) => {\r\n  const handleClose = (event: SyntheticEvent | MouseEvent, reason?: string) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    closed();\r\n  };\r\n  return (\r\n    <span>\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"right\",\r\n        }}\r\n        autoHideDuration={3000}\r\n        open={visible}\r\n        onClose={handleClose}\r\n        className={\"message-box-\" + type}\r\n      >\r\n        <SnackbarContent\r\n          className=\"message-content\"\r\n          aria-describedby=\"client-snackbar\"\r\n          message={\r\n            <span id=\"client-snackbar\" className=\"message-content-txt\">\r\n              <SnackBarIcon type={type} />\r\n              {message}\r\n            </span>\r\n          }\r\n        />\r\n      </Snackbar>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import { DatabaseCodeInfo } from \"./types\";\r\ntype CatchItem = {\r\n  baseInfo: DatabaseCodeInfo;\r\n  nameMap: NameMapCache;\r\n};\r\ntype NameMapCache = { [x: string]: string };\r\nconst CodeInfoCache: { [x: string]: CatchItem } = {};\r\n\r\nfunction setCodeInfoCache(baseInfo: DatabaseCodeInfo, nameMap: NameMapCache) {\r\n  CodeInfoCache[baseInfo.id] = { baseInfo: baseInfo, nameMap };\r\n}\r\nfunction delCodeInfoCache(id: string) {\r\n  delete CodeInfoCache[id];\r\n}\r\n\r\nfunction getCodeInfoCache(id: string) {\r\n  return CodeInfoCache[id].baseInfo;\r\n}\r\n\r\nfunction getNameMapCache(id: string) {\r\n  return CodeInfoCache[id].nameMap;\r\n}\r\n\r\nfunction getCodeInfoName(id: string, key: string) {\r\n  const codeInfo = getNameMapCache(id);\r\n  if (codeInfo) {\r\n    return codeInfo[key] || key;\r\n  }\r\n  return key;\r\n}\r\n\r\nexport {\r\n  setCodeInfoCache,\r\n  delCodeInfoCache,\r\n  getCodeInfoCache,\r\n  getCodeInfoName\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport {\r\n  deleteHistoryTimerData,\r\n  TimerDataInfo,\r\n  setCurrentCodeInfo\r\n} from \"@/actions/history\";\r\nimport { DatabaseCodeInfo } from \"@/utils/types\";\r\n\r\nexport default connect(\r\n  (state: any) => {\r\n    return { historyData: state.history };\r\n  },\r\n  (dispatch: any) => ({\r\n    deleteTimer(timerInfo: TimerDataInfo) {\r\n      dispatch(deleteHistoryTimerData(timerInfo));\r\n    },\r\n    setCurrCodeInfo(codeInfo: DatabaseCodeInfo) {\r\n      dispatch(setCurrentCodeInfo(codeInfo));\r\n    }\r\n  })\r\n);\r\n","export function dateFormat(date?: Date | number, format?: string): string {\r\n  let token = /d{1,4}|m{1,4}|yy(?:yy)?|H{1,2}|M{1,2}|S{1,2}/g;\r\n  if (Boolean(date)) {\r\n    date = date instanceof Date ? date : new Date(date as number);\r\n    let flags: { [x: string]: string } = {\r\n      yyyy: date.getFullYear().toString(),\r\n      mm: (\"0\" + (date.getMonth() + 1)).slice(-2),\r\n      dd: (\"0\" + date.getDate()).slice(-2),\r\n      HH: (\"0\" + date.getHours()).slice(-2),\r\n      MM: (\"0\" + date.getMinutes()).slice(-2),\r\n      SS: (\"0\" + date.getSeconds()).slice(-2)\r\n    };\r\n    if (!format) {\r\n      // 默认显示格式\r\n      format = \"yyyy-mm-dd HH:MM:SS\";\r\n    }\r\n    format = format.replace(token, function(match: string) {\r\n      if (match in flags) {\r\n        return flags[match];\r\n      }\r\n      return \"\";\r\n    });\r\n    return format;\r\n  }\r\n  return \"\";\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nimport { TimerDataInfo, TimerChild } from \"@/actions/history\";\r\nimport { dateFormat } from \"@/utils/date\";\r\n\r\ninterface FcProps {\r\n  info: TimerDataInfo;\r\n  collectTimer: (info: TimerDataInfo) => void;\r\n  deleteTimer: (timerInfo: TimerDataInfo) => void;\r\n}\r\n\r\nconst MyCard: React.FC<FcProps> = ({ info, deleteTimer, collectTimer }) => {\r\n  const [visible, setVisible] = useState<number>(1);\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n\r\n  const showMenu = Boolean(anchorEl);\r\n  const resultClassName = info.status === 2 ? \"result-error\" : \"result-success\";\r\n\r\n  function openSettingMenu(event: React.MouseEvent<HTMLElement>) {\r\n    setAnchorEl(event.currentTarget);\r\n  }\r\n\r\n  function handleClose() {\r\n    setAnchorEl(null);\r\n  }\r\n\r\n  function deleteCurrInfo() {\r\n    setVisible(0);\r\n    handleClose();\r\n    setTimeout(() => deleteTimer(info), 300);\r\n  }\r\n\r\n  function saveCurrentInfo() {\r\n    handleClose();\r\n    collectTimer(info);\r\n  }\r\n  return (\r\n    <aside className=\"result-card\">\r\n      <Grow in={Boolean(visible)}>\r\n        <Card>\r\n          <CardHeader\r\n            avatar={\r\n              <Avatar aria-label=\"recipe\" className={resultClassName}>\r\n                {info.status === 1 ? <Check /> : <Clear />}\r\n              </Avatar>\r\n            }\r\n            action={\r\n              <IconButton aria-label=\"settings\" onClick={openSettingMenu}>\r\n                <MoreVertIcon />\r\n              </IconButton>\r\n            }\r\n            title={info.name}\r\n            subheader={dateFormat(info.date, \"mm-dd HH:MM:SS\")}\r\n            className=\"result-card-header\"\r\n          />\r\n          <CardContent>\r\n            {info.children.map((childInfo: TimerChild, i: number) => (\r\n              <div className=\"result-card-item\" key={i}>\r\n                <span\r\n                  className={\r\n                    childInfo.async ? \"card-item-root async\" : \"card-item-root\"\r\n                  }\r\n                >\r\n                  {childInfo.name}\r\n                </span>\r\n                <span className=\"card-item-time\">{childInfo.time}ms</span>\r\n              </div>\r\n            ))}\r\n          </CardContent>\r\n          <Divider />\r\n          <CardContent>\r\n            {info.status === 1 ? (\r\n              <div className=\"result-active-success\">use: {info.useTime}ms</div>\r\n            ) : (\r\n              <div className=\"result-active-error\">{info.error}</div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      </Grow>\r\n      <Menu\r\n        id=\"long-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={showMenu}\r\n        onClose={handleClose}\r\n        PaperProps={{\r\n          style: {\r\n            width: 120\r\n          }\r\n        }}\r\n      >\r\n        <MenuItem onClick={saveCurrentInfo}>Collect</MenuItem>\r\n        <MenuItem onClick={deleteCurrInfo}>Delete</MenuItem>\r\n      </Menu>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default MyCard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { DatabaseItem } from \"@/utils/types\";\r\nimport { getAllData, putData } from \"@/utils/indexDB\";\r\nimport { dateFormat } from \"@/utils/date\";\r\nimport Delete from \"@material-ui/icons/Delete\";\r\nimport PlayCircleFilled from \"@material-ui/icons/PlayCircleFilled\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport StarBorder from \"@material-ui/icons/StarBorder\";\r\nimport Star from \"@material-ui/icons/Star\";\r\ninterface CollectorProps {\r\n  replayCollect: (item: DatabaseItem) => void;\r\n  deleteCollect: (item: DatabaseItem) => Promise<1 | 0>;\r\n}\r\n\r\nconst CollectorList: React.FC<CollectorProps> = ({\r\n  replayCollect,\r\n  deleteCollect\r\n}) => {\r\n  const [collectorList, setCollectorList] = useState<DatabaseItem[]>([]);\r\n  useEffect(() => {\r\n    handleGetList();\r\n  }, []);\r\n  async function handleGetList() {\r\n    const { data } = await getAllData();\r\n    if (data) {\r\n      const likedList = data.filter((item: DatabaseItem) => {\r\n        return item.liked;\r\n      });\r\n      const unLikedList = data.filter((item: DatabaseItem) => {\r\n        return !item.liked;\r\n      });\r\n      setCollectorList(likedList.concat(unLikedList));\r\n    }\r\n  }\r\n  async function handleDelete(info: DatabaseItem) {\r\n    const result = await deleteCollect(info);\r\n    if (result !== 1) return;\r\n    handleGetList();\r\n  }\r\n  async function handleLiked(collector: DatabaseItem) {\r\n    collector.liked = !collector.liked;\r\n    await putData(collector);\r\n    await handleGetList();\r\n  }\r\n  return (\r\n    <aside className=\"collector-box\">\r\n      <List>\r\n        {collectorList.map((collector: DatabaseItem) => (\r\n          <ListItem key={collector.id}>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  icon={<StarBorder />}\r\n                  checkedIcon={<Star />}\r\n                  checked={collector.liked}\r\n                  value=\"checkedH\"\r\n                />\r\n              }\r\n              label=\"\"\r\n              onClick={() => handleLiked(collector)}\r\n            />\r\n            <ListItemText\r\n              primary={collector.timerInfo.name}\r\n              secondary={dateFormat(collector.timerInfo.date)}\r\n            />\r\n            <IconButton\r\n              edge=\"end\"\r\n              aria-label=\"play\"\r\n              onClick={() => replayCollect(collector)}\r\n            >\r\n              <PlayCircleFilled />\r\n            </IconButton>\r\n            <IconButton\r\n              edge=\"end\"\r\n              aria-label=\"delete\"\r\n              onClick={() => handleDelete(collector)}\r\n            >\r\n              <Delete />\r\n            </IconButton>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default CollectorList;\r\n","import React, { Fragment, useState } from \"react\";\r\nimport connect from \"../container/history\";\r\nimport { TimerDataInfo } from \"../actions/history\";\r\nimport { DatabaseItem, DatabaseCodeInfo } from \"@/utils/types\";\r\nimport ResultCard from \"./ResultCard\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport CollectorList from \"./CollectorList\";\r\nimport Message from \"./Message\";\r\nimport interpreter from \"@/utils/baseStatement\";\r\nimport { addData, deleteData } from \"@/utils/indexDB\";\r\nimport { getCodeInfoCache } from \"@/utils/codeInfoCache\";\r\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\r\ninterface FcProps extends RouteComponentProps {\r\n  historyData: TimerDataInfo[];\r\n  deleteTimer: (timerInfo: TimerDataInfo) => void;\r\n  setCurrCodeInfo: (codeInfo: DatabaseCodeInfo) => void;\r\n}\r\n\r\ninterface MessageInfo {\r\n  type: string;\r\n  message: string;\r\n  visible: boolean;\r\n}\r\n\r\nconst HistoryView: React.FC<FcProps> = ({\r\n  historyData,\r\n  deleteTimer,\r\n  history,\r\n  setCurrCodeInfo\r\n}) => {\r\n  const [drawer, setDrawer] = useState<boolean>(false);\r\n  const [messageInfo, setMessageInfo] = useState<MessageInfo>({\r\n    type: \"success\",\r\n    visible: false,\r\n    message: \"\"\r\n  });\r\n  function handleCloseDrawer() {\r\n    setDrawer(false);\r\n  }\r\n  function handleOpenDrawer() {\r\n    setDrawer(true);\r\n  }\r\n  function showMessage({ type, message }: { type: string; message: string }) {\r\n    setMessageInfo({\r\n      type,\r\n      message,\r\n      visible: true\r\n    });\r\n  }\r\n  function closeMessage() {\r\n    setMessageInfo({\r\n      ...messageInfo,\r\n      visible: false\r\n    });\r\n  }\r\n  function collectTimer(info: TimerDataInfo) {\r\n    const codeInfo =\r\n      info.uid.indexOf(\"code\") > -1\r\n        ? getCodeInfoCache(info.uid)\r\n        : interpreter.getDatabaseInfo(info.uid);\r\n    const databaseItem = {\r\n      timerInfo: info,\r\n      codeInfo: codeInfo,\r\n      type: codeInfo.type,\r\n      liked: false\r\n    };\r\n    addData(databaseItem)\r\n      .then(() => {\r\n        showMessage({\r\n          type: \"success\",\r\n          message: \"Saved timer record\"\r\n        });\r\n      })\r\n      .catch((err: any) => {\r\n        showMessage({\r\n          type: \"warn\",\r\n          message: String(err)\r\n        });\r\n      });\r\n  }\r\n\r\n  function replayCollect(item: DatabaseItem) {\r\n    if (item.type === 1) {\r\n      history.push({\r\n        pathname: \"/custom\",\r\n        search: \"?type=1\" + Date.now()\r\n      });\r\n    } else if (item.type === 2) {\r\n      history.push({\r\n        pathname: \"/custom\",\r\n        search: \"?type=2\" + Date.now()\r\n      });\r\n      setCurrCodeInfo(item.codeInfo);\r\n    } else if (item.type === 3) {\r\n      history.push({\r\n        pathname: \"/code\"\r\n      });\r\n    }\r\n    setCurrCodeInfo(item.codeInfo);\r\n    setDrawer(false);\r\n  }\r\n\r\n  async function deleteCollect(item: DatabaseItem) {\r\n    if (!item.id) return 0;\r\n    const { error } = await deleteData(item.id);\r\n    if (error) {\r\n      showMessage({\r\n        type: \"error\",\r\n        message: (error as ErrorEvent).message\r\n      });\r\n      return 0;\r\n    }\r\n    return 1;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <aside className=\"history-box\">\r\n        <div className=\"collector-button\">\r\n          <Fab variant=\"extended\" aria-label=\"open\" onClick={handleOpenDrawer}>\r\n            <KeyboardArrowLeft />\r\n            Open Collector\r\n          </Fab>\r\n        </div>\r\n        {historyData.map((timerInfo: TimerDataInfo) => (\r\n          <ResultCard\r\n            key={timerInfo.id}\r\n            info={timerInfo}\r\n            deleteTimer={deleteTimer}\r\n            collectTimer={collectTimer}\r\n          />\r\n        ))}\r\n      </aside>\r\n      <Drawer anchor=\"right\" open={drawer} onClose={handleCloseDrawer}>\r\n        <CollectorList\r\n          replayCollect={replayCollect}\r\n          deleteCollect={deleteCollect}\r\n        />\r\n      </Drawer>\r\n      <Message\r\n        visible={messageInfo.visible}\r\n        type={messageInfo.type}\r\n        closed={closeMessage}\r\n        message={messageInfo.message}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default connect(withRouter(HistoryView));\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\r\n\r\ninterface ApiMenuInfo {\r\n  name: string;\r\n  id: string;\r\n}\r\ninterface MenuProps extends RouteComponentProps {\r\n  menuList: ApiMenuInfo[];\r\n  location: any;\r\n}\r\n\r\nconst Menu: React.FC<MenuProps> = ({ history, menuList, location }) => {\r\n  const apiPathMatch = /^\\/api\\/(\\d+)/;\r\n  const defaultTabId = menuList[0].id;\r\n  const [value, setValue] = useState(defaultTabId);\r\n\r\n  useEffect(() => {\r\n    const matchId = location.pathname.match(apiPathMatch);\r\n    if (!matchId) {\r\n      history.replace(\"/api/\" + defaultTabId);\r\n    } else {\r\n      setValue(matchId[1]);\r\n    }\r\n  }, [location.pathname, history, defaultTabId, apiPathMatch]);\r\n\r\n  function handleChange(e: any, value: string) {\r\n    history.push(\"/api/\" + value);\r\n  }\r\n\r\n  return (\r\n    <div className={\"api-menu\"}>\r\n      <Tabs\r\n        orientation=\"vertical\"\r\n        variant=\"scrollable\"\r\n        indicatorColor=\"primary\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        aria-label=\"Vertical tabs example\"\r\n      >\r\n        {menuList.map(({ name, id }: ApiMenuInfo, i) => (\r\n          <Tab key={id} label={name} value={id} />\r\n        ))}\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Menu);\r\n","import React from \"react\";\r\nimport { RouteWithSubRoutes } from \"@/router/index\";\r\nimport { RouterMap } from \"@/router/types\";\r\nimport Menu from \"./Menu\";\r\nimport interpreter from \"@/utils/baseStatement\";\r\nimport HistoryView from \"@/components/HistoryView\";\r\nconst MenuList = interpreter.getApiMenuList();\r\n\r\nconst Test = ({ routes }: { routes: RouterMap[] }) => {\r\n  return (\r\n    <div className={\"api-box\"}>\r\n      <Menu menuList={MenuList} />\r\n      <div className={\"api-view\"}>\r\n        <div className={\"api-context\"}>\r\n          {routes.map((route: RouterMap, i: number) => (\r\n            <RouteWithSubRoutes key={i} {...route} />\r\n          ))}\r\n        </div>\r\n        <HistoryView />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Test;\r\n"],"sourceRoot":""}