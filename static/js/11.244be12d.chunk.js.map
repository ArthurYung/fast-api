{"version":3,"sources":["../node_modules/@material-ui/core/esm/internal/svg-icons/createSvgIcon.js","components/Message.tsx","container/history.ts","utils/date.ts","components/ResultCard.tsx","components/CollectorList.tsx","components/HistoryView.tsx","page/api/Menu.tsx","page/api/App.tsx"],"names":["createSvgIcon","path","displayName","Component","memo","forwardRef","props","ref","createElement","muiName","SnackBarIcon","type","Message","message","visible","closed","anchorOrigin","vertical","horizontal","autoHideDuration","open","onClose","event","reason","className","aria-describedby","id","connect","state","historyData","history","dispatch","deleteTimer","timerInfo","deleteHistoryTimerData","dateFormat","date","format","Boolean","flags","yyyy","Date","getFullYear","toString","mm","getMonth","slice","dd","getDate","HH","getHours","MM","getMinutes","SS","getSeconds","replace","match","MyCard","info","collectTimer","useState","setVisible","anchorEl","setAnchorEl","showMenu","resultClassName","status","timerChildList","handleClose","deepChild","child","root","forEach","push","name","useTime","children","length","Grow","in","Card","CardHeader","avatar","Avatar","aria-label","action","IconButton","onClick","currentTarget","title","subheader","CardContent","map","childInfo","i","key","Divider","error","Menu","keepMounted","PaperProps","style","width","MenuItem","setTimeout","CollectorList","replayCollect","deleteCollect","collectorList","setCollectorList","a","getAllData","data","useEffect","then","List","collector","ListItem","ListItemText","primary","secondary","edge","handleDelete","withRouter","drawer","setDrawer","messageInfo","setMessageInfo","showMessage","codeInfo","interpreter","getDatabaseInfo","uid","databaseItem","addData","catch","err","String","item","deleteData","Fab","variant","ResultCard","Drawer","anchor","pathname","search","now","menuList","location","apiPathMatch","defaultTabId","value","setValue","matchId","Tabs","orientation","indicatorColor","onChange","e","Tab","label","MenuList","getApiMenuList","Test","routes","route","HistoryView"],"mappings":"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","file":"static/js/11.244be12d.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport SvgIcon from '../../SvgIcon';\nexport default function createSvgIcon(path, displayName) {\n  var Component = React.memo(React.forwardRef(function (props, ref) {\n    return React.createElement(SvgIcon, _extends({}, props, {\n      ref: ref\n    }), path);\n  }));\n\n  if (process.env.NODE_ENV !== 'production') {\n    Component.displayName = \"\".concat(displayName, \"Icon\");\n  }\n\n  Component.muiName = SvgIcon.muiName;\n  return Component;\n}","import React, { SyntheticEvent } from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\nimport Warning from \"@material-ui/icons/Warning\";\nimport Error from \"@material-ui/icons/Error\";\nimport CheckCircle from \"@material-ui/icons/CheckCircle\";\nimport Info from \"@material-ui/icons/Info\";\n\ninterface MessageProps {\n  visible: boolean;\n  message: string;\n  type?: string;\n  closed: () => void;\n}\n\nconst SnackBarIcon: React.FC<{ type: string }> = ({ type }) => {\n  if (type === \"success\") {\n    return <CheckCircle />;\n  }\n  if (type === \"warn\") {\n    return <Warning />;\n  }\n  if (type === \"error\") {\n    return <Error />;\n  }\n  return <Info />;\n};\n\nconst Message: React.FC<MessageProps> = ({\n  message,\n  visible,\n  closed,\n  type = \"info\",\n}) => {\n  const handleClose = (event: SyntheticEvent | MouseEvent, reason?: string) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    closed();\n  };\n  return (\n    <span>\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"top\",\n          horizontal: \"right\",\n        }}\n        autoHideDuration={3000}\n        open={visible}\n        onClose={handleClose}\n        className={\"message-box-\" + type}\n      >\n        <SnackbarContent\n          className=\"message-content\"\n          aria-describedby=\"client-snackbar\"\n          message={\n            <span id=\"client-snackbar\" className=\"message-content-txt\">\n              <SnackBarIcon type={type} />\n              {message}\n            </span>\n          }\n        />\n      </Snackbar>\n    </span>\n  );\n};\n\nexport default Message;\n","import { connect } from \"react-redux\";\nimport { deleteHistoryTimerData, TimerDataInfo } from \"@/actions/history\";\n\nexport default connect(\n  (state: any) => ({ historyData: state.history }),\n  (dispatch: any) => ({\n    deleteTimer(timerInfo: TimerDataInfo) {\n      dispatch(deleteHistoryTimerData(timerInfo));\n    }\n  })\n);\n","export function dateFormat(date?: Date | number, format?: string): string {\n  let token = /d{1,4}|m{1,4}|yy(?:yy)?|H{1,2}|M{1,2}|S{1,2}/g;\n  if (Boolean(date)) {\n    date = date instanceof Date ? date : new Date(date as number);\n    let flags: { [x: string]: string } = {\n      yyyy: date.getFullYear().toString(),\n      mm: (\"0\" + (date.getMonth() + 1)).slice(-2),\n      dd: (\"0\" + date.getDate()).slice(-2),\n      HH: (\"0\" + date.getHours()).slice(-2),\n      MM: (\"0\" + date.getMinutes()).slice(-2),\n      SS: (\"0\" + date.getSeconds()).slice(-2)\n    };\n    if (!format) {\n      // 默认显示格式\n      format = \"yyyy-mm-dd HH:MM:SS\";\n    }\n    format = format.replace(token, function(match: string) {\n      if (match in flags) {\n        return flags[match];\n      }\n      return \"\";\n    });\n    return format;\n  }\n  return \"\";\n}\n","import React, { useState } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Grow from \"@material-ui/core/Grow\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport Check from \"@material-ui/icons/Check\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Divider from \"@material-ui/core/Divider\";\n\nimport { TimerDataInfo } from \"@/actions/history\";\nimport { dateFormat } from \"@/utils/date\";\n\ninterface ChildTimerInfo {\n  name: string;\n  useTime: number;\n}\n\ninterface FcProps {\n  info: TimerDataInfo;\n  collectTimer: (info: TimerDataInfo) => void;\n  deleteTimer: (timerInfo: TimerDataInfo) => void;\n}\n\nconst MyCard: React.FC<FcProps> = ({ info, deleteTimer, collectTimer }) => {\n  const [visible, setVisible] = useState<number>(1);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const showMenu = Boolean(anchorEl);\n  const resultClassName = info.status === 2 ? \"result-error\" : \"result-success\";\n\n  const timerChildList: ChildTimerInfo[] = [];\n\n  function deepChild(child: TimerDataInfo[], root: string = \"\") {\n    child.forEach((info: TimerDataInfo) => {\n      timerChildList.push({\n        name: root + info.name,\n        useTime: info.useTime,\n      });\n      if (info.children.length) {\n        deepChild(info.children, info.name);\n      }\n    });\n  }\n\n  function openSettingMenu(event: React.MouseEvent<HTMLElement>) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n  function deleteCurrInfo() {\n    setVisible(0);\n    handleClose();\n    setTimeout(() => deleteTimer(info), 300);\n  }\n\n  function saveCurrentInfo() {\n    handleClose();\n    collectTimer(info);\n  }\n\n  deepChild(info.children);\n  return (\n    <aside className=\"result-card\">\n      <Grow in={Boolean(visible)}>\n        <Card>\n          <CardHeader\n            avatar={\n              <Avatar aria-label=\"recipe\" className={resultClassName}>\n                {info.status === 1 ? <Check /> : <Clear />}\n              </Avatar>\n            }\n            action={\n              <IconButton aria-label=\"settings\" onClick={openSettingMenu}>\n                <MoreVertIcon />\n              </IconButton>\n            }\n            title={info.name}\n            subheader={dateFormat(info.date, \"mm-dd HH:MM:SS\")}\n            className=\"result-card-header\"\n          />\n          <CardContent>\n            {timerChildList.map((childInfo: ChildTimerInfo, i: number) => (\n              <div className=\"result-card-item\" key={i}>\n                <span className=\"card-item-root\">{childInfo.name}</span>\n                <span className=\"card-item-time\">{childInfo.useTime}ms</span>\n              </div>\n            ))}\n          </CardContent>\n          <Divider />\n          <CardContent>\n            {info.status === 1 ? (\n              <div className=\"result-active-success\">use: {info.useTime}ms</div>\n            ) : (\n              <div className=\"result-active-error\">{info.error}</div>\n            )}\n          </CardContent>\n        </Card>\n      </Grow>\n      <Menu\n        id=\"long-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={showMenu}\n        onClose={handleClose}\n        PaperProps={{\n          style: {\n            width: 120,\n          },\n        }}\n      >\n        <MenuItem onClick={saveCurrentInfo}>Collect</MenuItem>\n        <MenuItem onClick={deleteCurrInfo}>Delete</MenuItem>\n      </Menu>\n    </aside>\n  );\n};\n\nexport default MyCard;\n","import React, { useEffect, useState } from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { DatabaseItem } from \"@/utils/types\";\nimport { getAllData } from \"@/utils/indexDB\";\nimport { dateFormat } from \"@/utils/date\";\nimport Delete from \"@material-ui/icons/Delete\";\nimport PlayCircleFilled from \"@material-ui/icons/PlayCircleFilled\";\n\ninterface CollectorProps {\n  replayCollect: (item: DatabaseItem) => void;\n  deleteCollect: (item: DatabaseItem) => Promise<1 | 0>;\n}\n\nconst CollectorList: React.FC<CollectorProps> = ({\n  replayCollect,\n  deleteCollect,\n}) => {\n  const [collectorList, setCollectorList] = useState<DatabaseItem[]>([]);\n  useEffect(() => {\n    getAllData().then((data) => {\n      setCollectorList(data.data);\n    });\n  }, []);\n  async function handleDelete(info: DatabaseItem) {\n    const result = await deleteCollect(info);\n    if (result !== 1) return;\n    const { data } = await getAllData();\n    if (data) setCollectorList(data);\n  }\n  return (\n    <aside className=\"collector-box\">\n      <List>\n        {collectorList.map((collector: DatabaseItem) => (\n          <ListItem key={collector.id}>\n            <ListItemText\n              primary={collector.timerInfo.name}\n              secondary={dateFormat(collector.timerInfo.date)}\n            />\n            <IconButton\n              edge=\"end\"\n              aria-label=\"play\"\n              onClick={() => replayCollect(collector)}\n            >\n              <PlayCircleFilled />\n            </IconButton>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"delete\"\n              onClick={() => handleDelete(collector)}\n            >\n              <Delete />\n            </IconButton>\n          </ListItem>\n        ))}\n      </List>\n    </aside>\n  );\n};\n\nexport default CollectorList;\n","import React, { Fragment, useState } from \"react\";\nimport connect from \"../container/history\";\nimport { TimerDataInfo } from \"../actions/history\";\nimport { DatabaseItem } from \"@/utils/types\";\nimport ResultCard from \"./ResultCard\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport CollectorList from \"./CollectorList\";\nimport Message from \"./Message\";\nimport interpreter from \"@/utils/baseStatement\";\nimport { addData, deleteData } from \"@/utils/indexDB\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\ninterface FcProps extends RouteComponentProps {\n  historyData: TimerDataInfo[];\n  deleteTimer: (timerInfo: TimerDataInfo) => void;\n}\n\ninterface MessageInfo {\n  type: string;\n  message: string;\n  visible: boolean;\n}\n\nconst HistoryView: React.FC<FcProps> = ({\n  historyData,\n  deleteTimer,\n  history\n}) => {\n  const [drawer, setDrawer] = useState<boolean>(false);\n  const [messageInfo, setMessageInfo] = useState<MessageInfo>({\n    type: \"success\",\n    visible: false,\n    message: \"\"\n  });\n  function handleCloseDrawer() {\n    setDrawer(false);\n  }\n  function handleOpenDrawer() {\n    setDrawer(true);\n  }\n  function showMessage({ type, message }: { type: string; message: string }) {\n    setMessageInfo({\n      type,\n      message,\n      visible: true\n    });\n  }\n  function closeMessage() {\n    setMessageInfo({\n      ...messageInfo,\n      visible: false\n    });\n  }\n  function collectTimer(info: TimerDataInfo) {\n    const codeInfo = interpreter.getDatabaseInfo(info.uid);\n    const databaseItem = {\n      timerInfo: info,\n      codeInfo: codeInfo,\n      type: codeInfo.type\n    };\n    addData(databaseItem)\n      .then(() => {\n        showMessage({\n          type: \"success\",\n          message: \"Saved timer record\"\n        });\n      })\n      .catch((err: any) => {\n        showMessage({\n          type: \"warn\",\n          message: String(err)\n        });\n      });\n  }\n\n  function replayCollect(item: DatabaseItem) {\n    if (item.type === 1) {\n      history.push({\n        state: item.codeInfo,\n        pathname: \"/custom\",\n        search: \"?type=1\" + Date.now()\n      });\n    } else if (item.type === 2) {\n      history.push({\n        state: item.codeInfo,\n        pathname: \"/custom\",\n        search: \"?type=2\" + Date.now()\n      });\n    }\n    setDrawer(false);\n  }\n\n  async function deleteCollect(item: DatabaseItem) {\n    if (!item.id) return 0;\n    const { error } = await deleteData(item.id);\n    if (error) {\n      showMessage({\n        type: \"error\",\n        message: (error as ErrorEvent).message\n      });\n      return 0;\n    }\n    return 1;\n  }\n\n  return (\n    <Fragment>\n      <aside className=\"history-box\">\n        <div className=\"collector-button\">\n          <Fab variant=\"extended\" aria-label=\"open\" onClick={handleOpenDrawer}>\n            <KeyboardArrowLeft />\n            Open Collector\n          </Fab>\n        </div>\n        {historyData.map((timerInfo: TimerDataInfo) => (\n          <ResultCard\n            key={timerInfo.id}\n            info={timerInfo}\n            deleteTimer={deleteTimer}\n            collectTimer={collectTimer}\n          />\n        ))}\n      </aside>\n      <Drawer anchor=\"right\" open={drawer} onClose={handleCloseDrawer}>\n        <CollectorList\n          replayCollect={replayCollect}\n          deleteCollect={deleteCollect}\n        />\n      </Drawer>\n      <Message\n        visible={messageInfo.visible}\n        type={messageInfo.type}\n        closed={closeMessage}\n        message={messageInfo.message}\n      />\n    </Fragment>\n  );\n};\n\nexport default connect(withRouter(HistoryView));\n","import React, { useState, useEffect } from \"react\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\ninterface ApiMenuInfo {\n  name: string;\n  id: string;\n}\ninterface MenuProps extends RouteComponentProps {\n  menuList: ApiMenuInfo[];\n  location: any;\n}\n\nconst Menu: React.FC<MenuProps> = ({ history, menuList, location }) => {\n  const apiPathMatch = /^\\/api\\/(\\d+)/;\n  const defaultTabId = menuList[0].id;\n  const [value, setValue] = useState(defaultTabId);\n\n  useEffect(() => {\n    const matchId = location.pathname.match(apiPathMatch);\n    if (!matchId) {\n      history.replace(\"/api/\" + defaultTabId);\n    } else {\n      setValue(matchId[1]);\n    }\n  }, [location.pathname, history, defaultTabId, apiPathMatch]);\n\n  function handleChange(e: any, value: string) {\n    history.push(\"/api/\" + value);\n  }\n\n  return (\n    <div className={\"api-menu\"}>\n      <Tabs\n        orientation=\"vertical\"\n        variant=\"scrollable\"\n        indicatorColor=\"primary\"\n        value={value}\n        onChange={handleChange}\n        aria-label=\"Vertical tabs example\"\n      >\n        {menuList.map(({ name, id }: ApiMenuInfo, i) => (\n          <Tab key={id} label={name} value={id} />\n        ))}\n      </Tabs>\n    </div>\n  );\n};\n\nexport default withRouter(Menu);\n","import React from \"react\";\nimport { RouteWithSubRoutes } from \"@/router/index\";\nimport { RouterMap } from \"@/router/types\";\nimport Menu from \"./Menu\";\nimport interpreter from \"@/utils/baseStatement\";\nimport HistoryView from \"@/components/HistoryView\";\nconst MenuList = interpreter.getApiMenuList();\n\nconst Test = ({ routes }: { routes: RouterMap[] }) => {\n  return (\n    <div className={\"api-box\"}>\n      <Menu menuList={MenuList} />\n      <div className={\"api-view\"}>\n        <div className={\"api-context\"}>\n          {routes.map((route: RouterMap, i: number) => (\n            <RouteWithSubRoutes key={i} {...route} />\n          ))}\n        </div>\n        <HistoryView />\n      </div>\n    </div>\n  );\n};\nexport default Test;\n"],"sourceRoot":""}