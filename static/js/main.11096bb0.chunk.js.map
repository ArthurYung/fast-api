{"version":3,"sources":["utils/baseCode.ts","utils/timer.ts","utils/baseStatement.ts","router/index.tsx","actions/home.ts","components/Header.tsx","components/Footer.tsx","components/Progress.tsx","container/progress.ts","reducer/index.ts","reducer/baseApi.ts","reducer/progress.ts","store.ts","App.tsx","serviceWorker.ts","index.tsx","template/api.tsx"],"names":["BaseCodeMap","__for","__for_less","__while","__while_less","__forEach","__map","id","timerTree","beginTimer","name","root","timerId","isRoot","timerInfo","startTime","window","performance","now","parentId","status","children","endTimer","isError","currentInfo","nowTime","endTime","console","log","push","getDataInfo","info","dataInfo","map","useTime","__getHandleTimerData","BASE_EXPRESSION_MATCH","interpreter","_api","_id","_apiMap","this","apiList","forEach","template","pushBaseApiInfo","apiInfo","__root__","api","Object","keys","key","currApiInfo","createBaseCode","expression","apiName","rootName","baseCode","matchResult","match","initCode","loopName","param","rootApi","loop","runtimeCode","baseCodeMap","replace","includes","fn","bodyCode","funStr","Function","num","createFunction","routes","path","component","lazy","RouteWithSubRoutes","route","exact","render","props","RouterView","fallback","i","PROGRESS_STATUS","NavBox","text","sub","to","color","ButtonBase","className","HEADER_PROPS_MAP","0","1","2","3","Header","pathname","location","navType","test","navProps","React","Component","withRouter","connect","state","progress","LinearProgress","combineReducers","baseApi","action","type","concat","payload","store","createStore","reducer","App","Footer","Boolean","hostname","apiInterpreter","init","for","for_less","while","while_less","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11096bb0.chunk.js","sourcesContent":["const __for = `for (let i = 0; i < $n; i++) {\r\n  <body>\r\n}`;\r\nconst __for_less = `for (let i = $n - 1; i >= 0; i--) {\r\n  <body>\r\n}`;\r\nconst __while = `let i = 0; \r\nwhile(i < $n) {\r\n  i++; \r\n  <body>\r\n}`;\r\nconst __while_less = `let i = $n;\r\nwhile(i--){\r\n  <body>\r\n}`;\r\nconst __forEach = `new Array($n).forEach((_,$i) => {\r\n  <body>\r\n})`;\r\nconst __map = `new Array($n).map((_,$i) => {\r\n  <body>\r\n})`;\r\n\r\ninterface baseCode {\r\n  [x: string]: string;\r\n}\r\nconst BaseCodeMap: baseCode = {\r\n  __for,\r\n  __for_less,\r\n  __while,\r\n  __while_less,\r\n  __forEach,\r\n  __map\r\n};\r\n\r\nexport default BaseCodeMap;\r\n","import { TimerDataInfo } from \"./types\";\r\n\r\ninterface TimerInfo {\r\n  id: number;\r\n  name: string;\r\n  root: boolean;\r\n  startTime: number;\r\n  endTime: number;\r\n  parentId: number | null;\r\n  status: number; // 0 - info, 1: success, 2: error\r\n  children: number[];\r\n}\r\n\r\nlet id: number = 0;\r\nconst timerTree: { [x: number]: TimerInfo } = {};\r\n\r\nfunction beginTimer(name: string, root: number | boolean): number {\r\n  id++;\r\n  const timerId = id;\r\n  const isRoot = root === true;\r\n  const timerInfo = {} as TimerInfo;\r\n  timerInfo.name = name;\r\n  timerInfo.root = isRoot;\r\n  timerInfo.startTime = window.performance.now();\r\n  timerInfo.parentId = isRoot ? null : (root as number);\r\n  timerInfo.status = 0;\r\n  timerInfo.children = [];\r\n  timerInfo.id = timerId;\r\n\r\n  timerTree[timerId] = timerInfo;\r\n  return timerId;\r\n}\r\n\r\nfunction endTimer(id: number, isError?: boolean): void {\r\n  const currentInfo: TimerInfo = timerTree[id];\r\n  const nowTime = window.performance.now();\r\n  if (currentInfo.status === 2) {\r\n    return;\r\n  }\r\n\r\n  currentInfo.status = isError ? 2 : 1;\r\n  currentInfo.endTime = nowTime;\r\n\r\n  if (currentInfo.parentId) {\r\n    console.log(currentInfo.parentId);\r\n    timerTree[currentInfo.parentId].children.push(id);\r\n  }\r\n\r\n  if (currentInfo.root) {\r\n    __getHandleTimerData(id);\r\n  }\r\n}\r\n\r\nfunction __getHandleTimerData(id: number): void {\r\n  const getDataInfo = (id: number): TimerDataInfo => {\r\n    const info = { ...timerTree[id] };\r\n    const dataInfo = {} as TimerDataInfo;\r\n    const children = info.children.map((id: number) => {\r\n      return getDataInfo(id);\r\n    });\r\n\r\n    dataInfo.id = id;\r\n    dataInfo.name = info.name;\r\n    dataInfo.status = info.status;\r\n    dataInfo.useTime = info.endTime - info.startTime;\r\n    dataInfo.children = children;\r\n\r\n    delete timerTree[id];\r\n    return dataInfo;\r\n  };\r\n  console.log(getDataInfo(id));\r\n}\r\n\r\nexport { beginTimer, endTimer };\r\n","import baseCodeMap from \"./baseCode\";\r\nimport { BaseApiInfo } from \"./types\";\r\nimport { beginTimer, endTimer } from \"./timer\";\r\nconst BASE_EXPRESSION_MATCH: RegExp = /^((.+?)\\|)?(<(.+?)>)?(@(.+?):)?(api)?(\\((.+?)\\))?/;\r\n\r\nfunction createFunction(\r\n  initCode: string,\r\n  bodyCode: string,\r\n  name: string\r\n): Function {\r\n  const funStr = `\r\n    ${initCode || \"\"}\r\n    let _timeId = _newTime($name, true)\r\n    try {\r\n      ${bodyCode || \"\"}\r\n    } catch(e){\r\n      _endTime(_timeId, true)\r\n    } finally {\r\n      _endTime(_timeId)\r\n    }\r\n  `;\r\n  // eslint-disable-next-line\r\n  const fn = new Function(\"$n\", \"$name\", \"_newTime\", \"_endTime\", funStr);\r\n  return function(num: number) {\r\n    fn(num, name + \"(\" + num + \")\", beginTimer, endTimer);\r\n  };\r\n}\r\n\r\ninterface apiTemplate {\r\n  __root__?: string;\r\n  [x: string]: string | undefined;\r\n}\r\n\r\nclass Interpreter {\r\n  public _api: BaseApiInfo[];\r\n  public _id: number;\r\n  public _apiMap: { [x: number]: BaseApiInfo };\r\n  constructor() {\r\n    this._api = [];\r\n    this._id = 1;\r\n    this._apiMap = {};\r\n  }\r\n\r\n  public init(apiList: apiTemplate[]) {\r\n    apiList.forEach((template: apiTemplate) => {\r\n      this.pushBaseApiInfo(template);\r\n    });\r\n  }\r\n\r\n  public pushBaseApiInfo(apiInfo: apiTemplate) {\r\n    const { __root__, ...api } = apiInfo;\r\n    Object.keys(api).forEach((key: string) => {\r\n      const id = this._id;\r\n      const result = this.createBaseCode(api[key] as string, key, __root__);\r\n      const currApiInfo = { ...result } as BaseApiInfo;\r\n\r\n      currApiInfo.id = id;\r\n      currApiInfo.key = key;\r\n      currApiInfo.expression = api[key];\r\n\r\n      this._api.push(currApiInfo);\r\n      this._apiMap[id] = currApiInfo;\r\n      this._id++;\r\n    });\r\n  }\r\n\r\n  public createBaseCode(\r\n    expression: string,\r\n    apiName: string,\r\n    rootName?: string\r\n  ) {\r\n    const matchResult: RegExpMatchArray =\r\n      expression.match(BASE_EXPRESSION_MATCH) || [];\r\n\r\n    const initCode = matchResult[2];\r\n    const loopName = matchResult[4];\r\n    const api = matchResult[7];\r\n    const param = matchResult[9];\r\n    const rootApi = matchResult[6] || rootName;\r\n    const root = rootApi === \"empty\" ? \"\" : rootApi;\r\n\r\n    let baseCode: string;\r\n    let name = apiName;\r\n    let loop = loopName !== \"empty\";\r\n    let runtimeCode = \"\" + root;\r\n\r\n    if (api) {\r\n      runtimeCode += root ? `.${apiName}` : apiName;\r\n    }\r\n    if (param) {\r\n      runtimeCode += `(${param})`;\r\n    }\r\n\r\n    if (loop) {\r\n      const loopCode = baseCodeMap[\"__\" + (loopName || \"for\")] || \"\";\r\n      baseCode = loopCode.replace(/<body>/, runtimeCode);\r\n    } else {\r\n      baseCode = runtimeCode;\r\n    }\r\n\r\n    if (root && ![\"window\", \"empty\"].includes(root)) {\r\n      name = `${root}.${apiName}`;\r\n    }\r\n\r\n    let fn = createFunction(initCode, baseCode, name);\r\n\r\n    return {\r\n      fn,\r\n      initCode,\r\n      baseCode,\r\n      loop,\r\n      root,\r\n      name\r\n    };\r\n  }\r\n\r\n  public getApiMenuList(): { name: string; id: number }[] {\r\n    return this._api.map((apiInfo: BaseApiInfo) => {\r\n      return {\r\n        name: apiInfo.name,\r\n        id: apiInfo.id\r\n      };\r\n    });\r\n  }\r\n\r\n  public getApiInfo(id: number): BaseApiInfo {\r\n    return this._apiMap[id];\r\n  }\r\n}\r\n\r\nconst interpreter = new Interpreter();\r\n\r\nexport default interpreter;\r\n","import React, { Suspense, lazy } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { RouterMap } from \"./types\";\r\n\r\nconst routes: RouterMap[] = [\r\n  {\r\n    path: \"/\",\r\n    component: lazy(() => import(\"../page/home/App\"))\r\n  },\r\n  {\r\n    path: \"/api\",\r\n    component: lazy(() => import(\"../page/api/App\")),\r\n    routes: [\r\n      {\r\n        path: \"/api/:id\",\r\n        component: lazy(() => import(\"../page/api/View\"))\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nfunction RouteWithSubRoutes(route: RouterMap) {\r\n  return (\r\n    <Route\r\n      exact={route.path === \"/\"}\r\n      path={route.path}\r\n      render={(props: any) => (\r\n        // pass the sub-routes down to keep nesting\r\n        <route.component {...props} routes={route.routes} />\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\nconst RouterView: React.FC = () => (\r\n  <Suspense fallback={<div>loading...</div>}>\r\n    {routes.map((route, i) => {\r\n      return <RouteWithSubRoutes key={i} {...route} />;\r\n    })}\r\n  </Suspense>\r\n);\r\n\r\nexport { RouterView, RouteWithSubRoutes };\r\n","export const ADD_TODO = \"ADD_TODO\";\r\nexport type ADD_TODO = typeof ADD_TODO;\r\n\r\nexport const PROGRESS_STATUS = \"PROGRESS_STATUS\";\r\nexport type PROGRESS_STATUS = typeof PROGRESS_STATUS;\r\n\r\nexport interface UpdateProgress {\r\n  type: PROGRESS_STATUS;\r\n  payload: boolean;\r\n}\r\n","import React from \"react\";\r\n// eslint-disable-next-line\r\nimport { Link, withRouter, RouteComponentProps } from \"react-router-dom\";\r\nimport ButtonBase from \"@material-ui/core/ButtonBase\";\r\ninterface NavBoxProps {\r\n  text: string;\r\n  sub?: string;\r\n  to: string;\r\n  color: string;\r\n}\r\n\r\n// Render a NavBox Dom\r\nconst NavBox: React.FC<NavBoxProps> = ({\r\n  text,\r\n  sub = \"Click Me\",\r\n  to,\r\n  color\r\n}) => (\r\n  <Link to={to}>\r\n    <ButtonBase className={\"nav-button\"}>\r\n      <div className={\"nav-box \" + color}>\r\n        <div className=\"nav-box-content\">\r\n          <h3 className=\"nav-box-text\">{text}</h3>\r\n          <div className=\"nav-box-subText\">{sub}</div>\r\n        </div>\r\n      </div>\r\n    </ButtonBase>\r\n  </Link>\r\n);\r\n\r\n/**\r\n *  Render different Nav according to current pathname\r\n */\r\n\r\nconst HEADER_PROPS_MAP: { [type: number]: NavBoxProps } = {\r\n  0: {\r\n    text: \"FAST API\",\r\n    to: \"/api\",\r\n    color: \"black\"\r\n  },\r\n  1: {\r\n    text: \"ES API\",\r\n    to: \"/log\",\r\n    color: \"green\"\r\n  },\r\n  2: {\r\n    text: \"EDIT API\",\r\n    to: \"/\",\r\n    color: \"blue\"\r\n  },\r\n  3: {\r\n    text: \"CODE TEST\",\r\n    to: \"/\",\r\n    color: \"red\"\r\n  }\r\n};\r\n\r\nclass Header extends React.Component<RouteComponentProps> {\r\n  render() {\r\n    const pathname: string = this.props.location.pathname;\r\n    let navType: number = 0;\r\n    if (pathname === \"/\") {\r\n      navType = 0;\r\n    }\r\n    if (/^\\/api(\\/?)/.test(pathname)) {\r\n      navType = 1;\r\n    }\r\n    if (/^\\/log(\\/?)/.test(pathname)) {\r\n      navType = 3;\r\n    }\r\n    const navProps: NavBoxProps =\r\n      HEADER_PROPS_MAP[navType] || HEADER_PROPS_MAP[0];\r\n    return (\r\n      <header className=\"layout-header\">\r\n        <nav className=\"layout-header-nav\">\r\n          <NavBox {...navProps} />\r\n        </nav>\r\n      </header>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(Header);\r\n","import React from \"react\";\r\nexport default (): React.ReactElement => <footer>if footer</footer>;\r\n","import React from \"react\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport connect from \"@/container/progress\";\r\n\r\nconst Progress: React.FC<{ progress: boolean }> = props => {\r\n  return (\r\n    <aside className=\"app-progress\">\r\n      {props.progress && <LinearProgress />}\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default connect(Progress);\r\n","import { connect } from \"react-redux\";\r\nexport default connect((state: any) => ({ progress: state.progress }));\r\n","import { combineReducers } from \"redux\";\r\nimport baseApi from \"./baseApi\";\r\nimport progress from \"./progress\";\r\n\r\nexport default combineReducers({ baseApi, progress });\r\n","import { ADD_TODO } from \"@/actions/home\";\r\n\r\ninterface testAction {\r\n  type: ADD_TODO;\r\n  text: string;\r\n}\r\nexport default function baseApi(state: string[] = [], action: testAction) {\r\n  switch (action.type) {\r\n    case \"ADD_TODO\":\r\n      return state.concat([action.text]);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { PROGRESS_STATUS, UpdateProgress } from \"../actions/home\";\r\n\r\nexport default function progress(\r\n  state: boolean = false,\r\n  action: UpdateProgress\r\n) {\r\n  switch (action.type) {\r\n    case PROGRESS_STATUS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import reducer from \"./reducer\";\r\nimport { createStore } from \"redux\";\r\nconst store = createStore(reducer);\r\nexport default store;\r\n","import React from \"react\";\r\nimport { RouterView } from \"./router\";\r\nimport Header from \"./components/Header\";\r\nimport Footer from \"./components/Footer\";\r\nimport Progress from \"./components/Progress\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <div className={\"app\"}>\r\n          <HashRouter>\r\n            <Progress />\r\n            <Header />\r\n            <main className={\"layout-main\"}>\r\n              <RouterView />\r\n            </main>\r\n            <Footer />\r\n          </HashRouter>\r\n        </div>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./assets/css/index.scss\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"prismjs/themes/prism-tomorrow.css\";\r\nimport apiInterpreter from \"./utils/baseStatement\";\r\nimport { Loops } from \"./template/api\";\r\n\r\napiInterpreter.init([Loops]);\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n","const Loops = {\r\n  __root__: \"empty\",\r\n  for: \"<for>\",\r\n  for_less: \"<for_less>\",\r\n  while: \"<while>\",\r\n  while_less: \"<while_less>\",\r\n  forEach: \"<forEach>\",\r\n  map: \"<map>\"\r\n};\r\n\r\nexport { Loops };\r\n"],"sourceRoot":""}