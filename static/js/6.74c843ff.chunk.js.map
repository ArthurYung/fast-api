{"version":3,"sources":["container/history.ts","utils/date.ts","components/ResultCard.tsx","components/HistoryView.tsx","assets/css/custom.module.scss","page/custom/Expression.tsx","page/custom/Content.tsx","page/custom/CustomTab.tsx","page/custom/App.tsx","components/Message.tsx","container/apiMain.ts"],"names":["connect","state","historyData","history","dispatch","deleteTimer","timerInfo","deleteHistoryTimerData","dateFormat","date","format","Boolean","flags","yyyy","Date","getFullYear","toString","mm","getMonth","slice","dd","getDate","HH","getHours","MM","getMinutes","SS","getSeconds","replace","match","MyCard","info","useState","visible","setVisible","anchorEl","setAnchorEl","type","message","messageInfo","setMessageInfo","showMenu","resultClassName","status","timerChildList","handleClose","showMessage","deepChild","child","root","forEach","push","name","useTime","children","length","className","Grow","in","Card","CardHeader","avatar","Avatar","aria-label","action","IconButton","onClick","event","currentTarget","title","subheader","CardContent","map","childInfo","i","key","Divider","error","Menu","id","keepMounted","open","onClose","PaperProps","style","width","MenuItem","databaseItem","codeInfo","interpreter","getDatabaseInfo","uid","addData","then","catch","err","String","setTimeout","Message","closed","saveTimer","ResultCard","module","exports","throttleTimeout","progress","updateProgress","updateHistoryList","loopCount","setLoopCount","rootName","setRootName","apiName","setApiName","apiInfo","setApiInfo","BaseCodeHtml","Prism","highlight","baseCode","languages","javascript","initCodeHtml","initCode","Button","variant","color","timerData","fn","Number","pushCustomApiInfo","classes","items","Typography","gutterBottom","RadioGroup","radio","value","onChange","e","Radio","radioLabel","formInput","TextField","label","apiInput","helperText","expressionInput","expression","clearTimeout","getBaseApiInfo","minHeight","dangerouslySetInnerHTML","__html","CustomContent","currentTab","HistoryView","withRouter","props","currSearchMatch","location","search","currTab","setCurrTab","Tabs","orientation","indicatorColor","Tab","Custom","Content","SnackBarIcon","anchorOrigin","vertical","horizontal","autoHideDuration","reason","aria-describedby","UpdateProgress","updateHistoryResultData"],"mappings":"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","file":"static/js/6.74c843ff.chunk.js","sourcesContent":["import { connect } from \"react-redux\";\nimport { deleteHistoryTimerData, TimerDataInfo } from \"@/actions/history\";\n\nexport default connect(\n  (state: any) => ({ historyData: state.history }),\n  (dispatch: any) => ({\n    deleteTimer(timerInfo: TimerDataInfo) {\n      dispatch(deleteHistoryTimerData(timerInfo));\n    }\n  })\n);\n","export function dateFormat(date?: Date | number, format?: string): string {\n  let token = /d{1,4}|m{1,4}|yy(?:yy)?|H{1,2}|M{1,2}|S{1,2}/g;\n  if (Boolean(date)) {\n    date = date instanceof Date ? date : new Date(date as number);\n    let flags: { [x: string]: string } = {\n      yyyy: date.getFullYear().toString(),\n      mm: (\"0\" + (date.getMonth() + 1)).slice(-2),\n      dd: (\"0\" + date.getDate()).slice(-2),\n      HH: (\"0\" + date.getHours()).slice(-2),\n      MM: (\"0\" + date.getMinutes()).slice(-2),\n      SS: (\"0\" + date.getSeconds()).slice(-2)\n    };\n    if (!format) {\n      // 默认显示格式\n      format = \"yyyy-mm-dd HH:MM:SS\";\n    }\n    format = format.replace(token, function(match: string) {\n      if (match in flags) {\n        return flags[match];\n      }\n      return \"\";\n    });\n    return format;\n  }\n  return \"\";\n}\n","import React, { useState } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Grow from \"@material-ui/core/Grow\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport Check from \"@material-ui/icons/Check\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Message from \"./Message\";\nimport { addData } from \"@/utils/indexDB\";\nimport { TimerDataInfo } from \"@/actions/history\";\nimport { dateFormat } from \"@/utils/date\";\nimport interpreter from \"@/utils/baseStatement\";\ninterface ChildTimerInfo {\n  name: string;\n  useTime: number;\n}\n\ninterface FcProps {\n  info: TimerDataInfo;\n  saveTimer: () => void;\n  deleteTimer: (timerInfo: TimerDataInfo) => void;\n}\n\ninterface MessageInfo {\n  type: string;\n  message: string;\n  visible: boolean;\n}\n\nconst MyCard: React.FC<FcProps> = ({ info, deleteTimer }) => {\n  const [visible, setVisible] = useState<number>(1);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [messageInfo, setMessageInfo] = useState<MessageInfo>({\n    type: \"success\",\n    visible: false,\n    message: \"\",\n  });\n  const showMenu = Boolean(anchorEl);\n  const resultClassName = info.status === 2 ? \"result-error\" : \"result-success\";\n\n  const timerChildList: ChildTimerInfo[] = [];\n\n  function deepChild(child: TimerDataInfo[], root: string = \"\") {\n    child.forEach((info: TimerDataInfo) => {\n      timerChildList.push({\n        name: root + info.name,\n        useTime: info.useTime,\n      });\n      if (info.children.length) {\n        deepChild(info.children, info.name);\n      }\n    });\n  }\n\n  function openSettingMenu(event: React.MouseEvent<HTMLElement>) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n  function deleteCurrInfo() {\n    setVisible(0);\n    handleClose();\n    setTimeout(() => deleteTimer(info), 300);\n  }\n\n  function saveCurrentInfo() {\n    handleClose();\n    const databaseItem = {\n      timerInfo: info,\n      codeInfo: interpreter.getDatabaseInfo(info.uid),\n      type: 1,\n    };\n    addData(databaseItem)\n      .then(() => {\n        showMessage({\n          type: \"success\",\n          message: \"Saved timer record\",\n        });\n      })\n      .catch((err: any) => {\n        showMessage({\n          type: \"warn\",\n          message: String(err),\n        });\n      });\n  }\n\n  function showMessage({ type, message }: { type: string; message: string }) {\n    setMessageInfo({\n      type,\n      message,\n      visible: true,\n    });\n  }\n  function closeMessage() {\n    setMessageInfo({\n      ...messageInfo,\n      visible: false,\n    });\n  }\n\n  deepChild(info.children);\n  return (\n    <aside className=\"result-card\">\n      <Grow in={Boolean(visible)}>\n        <Card>\n          <CardHeader\n            avatar={\n              <Avatar aria-label=\"recipe\" className={resultClassName}>\n                {info.status === 1 ? <Check /> : <Clear />}\n              </Avatar>\n            }\n            action={\n              <IconButton aria-label=\"settings\" onClick={openSettingMenu}>\n                <MoreVertIcon />\n              </IconButton>\n            }\n            title={info.name}\n            subheader={dateFormat(info.date, \"mm-dd HH:MM:SS\")}\n            className=\"result-card-header\"\n          />\n          <CardContent>\n            {timerChildList.map((childInfo: ChildTimerInfo, i: number) => (\n              <div className=\"result-card-item\" key={i}>\n                <span className=\"card-item-root\">{childInfo.name}</span>\n                <span className=\"card-item-time\">{childInfo.useTime}ms</span>\n              </div>\n            ))}\n          </CardContent>\n          <Divider />\n          <CardContent>\n            {info.status === 1 ? (\n              <div className=\"result-active-success\">use: {info.useTime}ms</div>\n            ) : (\n              <div className=\"result-active-error\">{info.error}</div>\n            )}\n          </CardContent>\n        </Card>\n      </Grow>\n      <Menu\n        id=\"long-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={showMenu}\n        onClose={handleClose}\n        PaperProps={{\n          style: {\n            width: 120,\n          },\n        }}\n      >\n        <MenuItem onClick={saveCurrentInfo}>SaveDB</MenuItem>\n        <MenuItem onClick={deleteCurrInfo}>Delete</MenuItem>\n      </Menu>\n      <Message\n        visible={messageInfo.visible}\n        type={messageInfo.type}\n        closed={closeMessage}\n        message={messageInfo.message}\n      />\n    </aside>\n  );\n};\n\nexport default MyCard;\n","import React from \"react\";\nimport connect from \"../container/history\";\nimport { TimerDataInfo } from \"../actions/history\";\nimport ResultCard from \"./ResultCard\";\n\ninterface FcProps {\n  historyData: TimerDataInfo[];\n  deleteTimer: (timerInfo: TimerDataInfo) => void;\n}\n\nconst HistoryView: React.FC<FcProps> = ({ historyData, deleteTimer }) => {\n  function saveTimer() {}\n  return (\n    <aside className=\"history-box\">\n      {historyData.map((timerInfo: TimerDataInfo) => (\n        <ResultCard\n          key={timerInfo.id}\n          info={timerInfo}\n          deleteTimer={deleteTimer}\n          saveTimer={saveTimer}\n        />\n      ))}\n    </aside>\n  );\n};\n\nexport default connect(HistoryView);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formInput\":\"custom_formInput__1vrEs\",\"items\":\"custom_items__sKkq6\",\"expressionInput\":\"custom_expressionInput__3waP-\",\"apiInput\":\"custom_apiInput__dMDqN\",\"radioLabel\":\"custom_radioLabel__2hRq_\",\"radio\":\"custom_radio__3Cpkp\"};","import React, { useState, ChangeEvent } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Replay from \"@material-ui/icons/Replay\";\nimport classes from \"@/assets/css/custom.module.scss\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Prism from \"prismjs\";\nimport interpreter from \"@/utils/baseStatement\";\nimport { BaseApiInfo } from \"@/utils/types\";\nimport { TimerDataInfo } from \"@/actions/history\";\nimport connect from \"@/container/apiMain\";\nimport Message from \"@/components/Message\";\n\ninterface expressionProps {\n  progress: boolean;\n  updateProgress: (status: boolean) => void;\n  updateHistoryList: (info: TimerDataInfo) => void;\n}\n\ninterface MessageInfo {\n  type: string;\n  message: string;\n  visible: boolean;\n}\nconst Expression: React.FC<expressionProps> = ({\n  progress,\n  updateProgress,\n  updateHistoryList,\n}) => {\n  const [loopCount, setLoopCount] = useState<string>(\"50000\");\n  const [rootName, setRootName] = useState<string>(\"\");\n  const [apiName, setApiName] = useState<string>(\"\");\n  const [apiInfo, setApiInfo] = useState<BaseApiInfo | undefined>();\n  const [messageInfo, setMessageInfo] = useState<MessageInfo>({\n    type: \"success\",\n    visible: false,\n    message: \"\",\n  });\n  const BaseCodeHtml: string = Prism.highlight(\n    apiInfo ? apiInfo.baseCode : \"\",\n    Prism.languages.javascript,\n    \"javascript\"\n  );\n  const initCodeHtml: string = Prism.highlight(\n    apiInfo ? apiInfo.initCode : \"\",\n    Prism.languages.javascript,\n    \"javascript\"\n  );\n\n  let throttleTimeout: any;\n  function runCurrentApiTest() {\n    if (progress) return;\n    if (apiInfo) {\n      updateProgress(true);\n      setTimeout(() => {\n        const timerData: TimerDataInfo = apiInfo.fn(Number(loopCount));\n        if (!timerData.id) {\n          showMessage({ type: \"error\", message: timerData.error as string });\n        } else {\n          interpreter.pushCustomApiInfo(apiInfo);\n          updateHistoryList(timerData);\n        }\n        updateProgress(false);\n      }, 200);\n    }\n  }\n\n  function handleChangeTime(e: any, value: string) {\n    setLoopCount(value);\n  }\n  function inputRootName(e: ChangeEvent<HTMLInputElement>) {\n    setRootName(e.currentTarget.value);\n  }\n  function inputApiName(e: ChangeEvent<HTMLInputElement>) {\n    setApiName(e.currentTarget.value);\n  }\n  function inputExpression(e: ChangeEvent<HTMLInputElement>) {\n    translateApiInfo(e.currentTarget.value);\n  }\n  function translateApiInfo(expression: string) {\n    clearTimeout(throttleTimeout);\n    throttleTimeout = setTimeout(() => {\n      const apiInfo = interpreter.getBaseApiInfo(expression, apiName, rootName);\n      if (apiInfo) {\n        setApiInfo(apiInfo);\n      }\n    }, 500);\n  }\n  function showMessage({ type, message }: { type: string; message: string }) {\n    setMessageInfo({\n      type,\n      message,\n      visible: true,\n    });\n  }\n  function closeMessage() {\n    setMessageInfo({\n      ...messageInfo,\n      visible: false,\n    });\n  }\n\n  return (\n    <article>\n      <section>\n        <div className=\"component-title\">Use Expression</div>\n        <Button variant=\"contained\" color=\"primary\" onClick={runCurrentApiTest}>\n          Run Test\n          <Replay />\n        </Button>\n      </section>\n      <section className={classes.items}>\n        <Typography variant=\"subtitle1\" gutterBottom>\n          Loop Count:\n        </Typography>\n        <RadioGroup\n          aria-label=\"gender\"\n          name=\"gender1\"\n          className={classes.radio}\n          value={loopCount}\n          onChange={handleChangeTime}\n        >\n          <Radio value=\"50000\" color=\"primary\" />\n          <span className={classes.radioLabel}>50000</span>\n          <Radio value=\"100000\" color=\"primary\" />\n          <span className={classes.radioLabel}>100000</span>\n          <Radio value=\"500000\" color=\"primary\" />\n          <span className={classes.radioLabel}>500000</span>\n          <Radio value=\"1000000\" color=\"primary\" />\n          <span className={classes.radioLabel}>1000000</span>\n          <Radio value=\"10000000\" color=\"primary\" />\n          <span className={classes.radioLabel}>10000000</span>\n        </RadioGroup>\n      </section>\n      <section className={classes.items}>\n        <Typography variant=\"subtitle1\" gutterBottom>\n          Expression:\n        </Typography>\n        <div className={classes.formInput}>\n          <TextField\n            label=\"Root Name\"\n            className={classes.apiInput}\n            onChange={inputRootName}\n            helperText=\"set api root path if you input this\"\n          />\n          <TextField\n            label=\"API Name\"\n            className={classes.apiInput}\n            onChange={inputApiName}\n            helperText=\"api name in the replacement expression\"\n          />\n          <TextField\n            label=\"Expression\"\n            className={classes.expressionInput}\n            onChange={inputExpression}\n            helperText=\"see expression rules\"\n          />\n        </div>\n      </section>\n      <section className={classes.items}>\n        <Typography variant=\"subtitle1\" gutterBottom>\n          Before the timer begin code:\n        </Typography>\n        <pre\n          className=\"language-javascript pre-javascript\"\n          style={{ minHeight: \"40px\" }}\n          dangerouslySetInnerHTML={{ __html: initCodeHtml }}\n        />\n      </section>\n      <section className={classes.items}>\n        <Typography variant=\"subtitle1\" gutterBottom>\n          Code under test:\n        </Typography>\n        <pre\n          className=\"language-javascript pre-javascript\"\n          style={{ minHeight: \"40px\" }}\n          dangerouslySetInnerHTML={{ __html: BaseCodeHtml }}\n        />\n      </section>\n      <Message\n        visible={messageInfo.visible}\n        type={messageInfo.type}\n        closed={closeMessage}\n        message={messageInfo.message}\n      />\n    </article>\n  );\n};\n\nexport default connect(Expression);\n","import React from \"react\";\nimport HistoryView from \"@/components/HistoryView\";\nimport Expression from \"./Expression\";\nconst CustomContent: React.FC<{ currentTab: string }> = ({ currentTab }) => {\n  return (\n    <div className=\"custom-content-main\">\n      <div className=\"custom-content-view\">\n        {currentTab === \"1\" ? <Expression /> : <span>test</span>}\n      </div>\n      <HistoryView />\n    </div>\n  );\n};\n\nexport default CustomContent;\n","import React, { useState } from \"react\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\nconst CustomTabs: React.FC<RouteComponentProps> = (props) => {\n  let currentTab = \"1\";\n  let currSearchMatch = props.location.search.match(/^\\?type=(1|2)/);\n  if (currSearchMatch) {\n    currentTab = currSearchMatch[1];\n  }\n  const [currTab, setCurrTab] = useState<string>(currentTab);\n\n  function handleChange(e: any, value: string) {\n    setCurrTab(value);\n    props.history.push(\"/custom?type=\" + value);\n  }\n  return (\n    <Tabs\n      orientation=\"vertical\"\n      variant=\"scrollable\"\n      indicatorColor=\"primary\"\n      value={currTab}\n      onChange={handleChange}\n      aria-label=\"Vertical tabs example\"\n      className=\"custom-content-tabs\"\n    >\n      <Tab label=\"Expression\" value=\"1\" />\n      <Tab label=\"Edit loop\" value=\"2\" />\n    </Tabs>\n  );\n};\n\nexport default withRouter(CustomTabs);\n","import React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport Content from \"./Content\";\nimport Tabs from \"./CustomTab\";\n\nconst Custom: React.FC<RouteComponentProps> = (props) => {\n  let currentTab = \"1\";\n  let currSearchMatch = props.location.search.match(/^\\?type=(1|2)/);\n  if (currSearchMatch) {\n    currentTab = currSearchMatch[1];\n  }\n  return (\n    <div className=\"custom-box\">\n      <Tabs />\n      <Content currentTab={currentTab} />\n    </div>\n  );\n};\n\nexport default Custom;\n","import React, { SyntheticEvent } from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\nimport Warning from \"@material-ui/icons/Warning\";\nimport Error from \"@material-ui/icons/Error\";\nimport CheckCircle from \"@material-ui/icons/CheckCircle\";\nimport Info from \"@material-ui/icons/Info\";\n\ninterface MessageProps {\n  visible: boolean;\n  message: string;\n  type?: string;\n  closed: () => void;\n}\n\nconst SnackBarIcon: React.FC<{ type: string }> = ({ type }) => {\n  if (type === \"success\") {\n    return <CheckCircle />;\n  }\n  if (type === \"warn\") {\n    return <Warning />;\n  }\n  if (type === \"error\") {\n    return <Error />;\n  }\n  return <Info />;\n};\n\nconst Message: React.FC<MessageProps> = ({\n  message,\n  visible,\n  closed,\n  type = \"info\",\n}) => {\n  const handleClose = (event: SyntheticEvent | MouseEvent, reason?: string) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    closed();\n  };\n  return (\n    <span>\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"top\",\n          horizontal: \"right\",\n        }}\n        autoHideDuration={3000}\n        open={visible}\n        onClose={handleClose}\n        className={\"message-box-\" + type}\n      >\n        <SnackbarContent\n          className=\"message-content\"\n          aria-describedby=\"client-snackbar\"\n          message={\n            <span id=\"client-snackbar\" className=\"message-content-txt\">\n              <SnackBarIcon type={type} />\n              {message}\n            </span>\n          }\n        />\n      </Snackbar>\n    </span>\n  );\n};\n\nexport default Message;\n","import { connect } from \"react-redux\";\nimport { UpdateProgress } from \"../actions/home\";\nimport { updateHistoryResultData, TimerDataInfo } from \"../actions/history\";\nexport default connect(\n  (state: any) => ({ progress: state.progress }),\n  (dispatch: any) => ({\n    updateProgress(state: boolean) {\n      dispatch(UpdateProgress(state));\n    },\n    updateHistoryList(info: TimerDataInfo) {\n      dispatch(updateHistoryResultData(info));\n    }\n  })\n);\n"],"sourceRoot":""}