{"version":3,"sources":["page/api/Menu.tsx","container/history.ts","components/Message.tsx","utils/date.ts","components/ResultCard.tsx","components/HistoryView.tsx","page/api/App.tsx"],"names":["withRouter","history","menuList","className","List","map","i","name","id","ListItem","key","ListItemText","primary","ListItemSecondaryAction","IconButton","edge","aria-label","onClick","push","connect","state","historyData","dispatch","deleteTimer","timerInfo","deleteHistoryTimerData","SnackBarIcon","type","Message","message","visible","closed","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","open","onClose","event","reason","SnackbarContent","aria-describedby","dateFormat","date","format","Boolean","flags","yyyy","Date","getFullYear","toString","mm","getMonth","slice","dd","getDate","HH","getHours","MM","getMinutes","SS","getSeconds","replace","match","MyCard","info","useState","setVisible","anchorEl","setAnchorEl","messageInfo","setMessageInfo","showMenu","resultClassName","status","timerChildList","handleClose","showMessage","deepChild","child","root","forEach","useTime","children","length","Grow","in","Card","CardHeader","avatar","Avatar","action","currentTarget","title","subheader","CardContent","childInfo","Divider","error","keepMounted","PaperProps","style","width","MenuItem","databaseItem","codeInfo","interpreter","getDatabaseInfo","uid","addData","then","catch","err","String","setTimeout","saveTimer","ResultCard","MenuList","getApiMenuList","Test","routes","route"],"mappings":"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","file":"static/js/6.d62f1b5b.chunk.js","sourcesContent":["import React from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport TripOrigin from \"@material-ui/icons/TripOrigin\";\nimport PlayArrow from \"@material-ui/icons/PlayArrow\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\ninterface ApiMenuInfo {\n  name: string;\n  id: string;\n}\ninterface MenuProps extends RouteComponentProps {\n  menuList: ApiMenuInfo[];\n}\n\nconst Menu: React.FC<MenuProps> = ({ history, menuList }: MenuProps) => (\n  <div className={\"api-menu\"}>\n    <List>\n      {menuList.map(({ name, id }: ApiMenuInfo, i) => (\n        <ListItem key={i} className={\"api-menu-item\"}>\n          <TripOrigin />\n          <ListItemText primary={name} />\n          <ListItemSecondaryAction>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"action\"\n              onClick={() => history.push(`/api/${id}`)}\n            >\n              <PlayArrow />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </ListItem>\n      ))}\n    </List>\n  </div>\n);\n\nexport default withRouter(Menu);\n","import { connect } from \"react-redux\";\nimport { deleteHistoryTimerData, TimerDataInfo } from \"@/actions/history\";\n\nexport default connect(\n  (state: any) => ({ historyData: state.history }),\n  (dispatch: any) => ({\n    deleteTimer(timerInfo: TimerDataInfo) {\n      dispatch(deleteHistoryTimerData(timerInfo));\n    }\n  })\n);\n","import React, { SyntheticEvent } from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\nimport Warning from \"@material-ui/icons/Warning\";\nimport Error from \"@material-ui/icons/Error\";\nimport CheckCircle from \"@material-ui/icons/CheckCircle\";\nimport Info from \"@material-ui/icons/Info\";\n\ninterface MessageProps {\n  visible: boolean;\n  message: string;\n  type?: string;\n  closed: () => void;\n}\n\nconst SnackBarIcon: React.FC<{ type: string }> = ({ type }) => {\n  if (type === \"success\") {\n    return <CheckCircle />;\n  }\n  if (type === \"warn\") {\n    return <Warning />;\n  }\n  if (type === \"error\") {\n    return <Error />;\n  }\n  return <Info />;\n};\n\nconst Message: React.FC<MessageProps> = ({\n  message,\n  visible,\n  closed,\n  type = \"info\",\n}) => {\n  const handleClose = (event: SyntheticEvent | MouseEvent, reason?: string) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    closed();\n  };\n  return (\n    <span>\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"top\",\n          horizontal: \"right\",\n        }}\n        autoHideDuration={3000}\n        open={visible}\n        onClose={handleClose}\n        className={\"message-box-\" + type}\n      >\n        <SnackbarContent\n          className=\"message-content\"\n          aria-describedby=\"client-snackbar\"\n          message={\n            <span id=\"client-snackbar\" className=\"message-content-txt\">\n              <SnackBarIcon type={type} />\n              {message}\n            </span>\n          }\n        />\n      </Snackbar>\n    </span>\n  );\n};\n\nexport default Message;\n","export function dateFormat(date?: Date | number, format?: string): string {\n  let token = /d{1,4}|m{1,4}|yy(?:yy)?|H{1,2}|M{1,2}|S{1,2}/g;\n  if (Boolean(date)) {\n    date = date instanceof Date ? date : new Date(date as number);\n    let flags: { [x: string]: string } = {\n      yyyy: date.getFullYear().toString(),\n      mm: (\"0\" + (date.getMonth() + 1)).slice(-2),\n      dd: (\"0\" + date.getDate()).slice(-2),\n      HH: (\"0\" + date.getHours()).slice(-2),\n      MM: (\"0\" + date.getMinutes()).slice(-2),\n      SS: (\"0\" + date.getSeconds()).slice(-2)\n    };\n    if (!format) {\n      // 默认显示格式\n      format = \"yyyy-mm-dd HH:MM:SS\";\n    }\n    format = format.replace(token, function(match: string) {\n      if (match in flags) {\n        return flags[match];\n      }\n      return \"\";\n    });\n    return format;\n  }\n  return \"\";\n}\n","import React, { useState, Fragment } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Grow from \"@material-ui/core/Grow\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport Check from \"@material-ui/icons/Check\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Message from \"./Message\";\nimport { addData } from \"@/utils/indexDB\";\nimport { TimerDataInfo } from \"@/actions/history\";\nimport { dateFormat } from \"@/utils/date\";\nimport interpreter from \"@/utils/baseStatement\";\ninterface ChildTimerInfo {\n  name: string;\n  useTime: number;\n}\n\ninterface FcProps {\n  info: TimerDataInfo;\n  saveTimer: () => void;\n  deleteTimer: (timerInfo: TimerDataInfo) => void;\n}\n\ninterface MessageInfo {\n  type: string;\n  message: string;\n  visible: boolean;\n}\n\nconst MyCard: React.FC<FcProps> = ({ info, deleteTimer }) => {\n  const [visible, setVisible] = useState<number>(1);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [messageInfo, setMessageInfo] = useState<MessageInfo>({\n    type: \"success\",\n    visible: false,\n    message: \"\",\n  });\n  const showMenu = Boolean(anchorEl);\n  const resultClassName = info.status === 2 ? \"result-error\" : \"result-success\";\n\n  const timerChildList: ChildTimerInfo[] = [];\n\n  function deepChild(child: TimerDataInfo[], root: string = \"\") {\n    child.forEach((info: TimerDataInfo) => {\n      timerChildList.push({\n        name: root + info.name,\n        useTime: info.useTime,\n      });\n      if (info.children.length) {\n        deepChild(info.children, info.name);\n      }\n    });\n  }\n\n  function openSettingMenu(event: React.MouseEvent<HTMLElement>) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n  function deleteCurrInfo() {\n    setVisible(0);\n    handleClose();\n    setTimeout(() => deleteTimer(info), 300);\n  }\n\n  function saveCurrentInfo() {\n    handleClose();\n    const databaseItem = {\n      timerInfo: info,\n      codeInfo: interpreter.getDatabaseInfo(info.uid),\n      type: 1,\n    };\n    addData(databaseItem)\n      .then(() => {\n        showMessage({\n          type: \"success\",\n          message: \"Saved timer record\",\n        });\n      })\n      .catch((err: any) => {\n        showMessage({\n          type: \"warn\",\n          message: String(err),\n        });\n      });\n  }\n\n  function showMessage({ type, message }: { type: string; message: string }) {\n    setMessageInfo({\n      type,\n      message,\n      visible: true,\n    });\n  }\n  function closeMessage() {\n    setMessageInfo({\n      ...messageInfo,\n      visible: false,\n    });\n  }\n\n  deepChild(info.children);\n  return (\n    <aside className=\"result-card\">\n      <Grow in={Boolean(visible)}>\n        <Card>\n          <CardHeader\n            avatar={\n              <Avatar aria-label=\"recipe\" className={resultClassName}>\n                {info.status === 1 ? <Check /> : <Clear />}\n              </Avatar>\n            }\n            action={\n              <IconButton aria-label=\"settings\" onClick={openSettingMenu}>\n                <MoreVertIcon />\n              </IconButton>\n            }\n            title={info.name}\n            subheader={dateFormat(info.date, \"mm-dd HH:MM:SS\")}\n            className=\"result-card-header\"\n          />\n          <CardContent>\n            {timerChildList.map((childInfo: ChildTimerInfo, i: number) => (\n              <div className=\"result-card-item\" key={i}>\n                <span className=\"card-item-root\">{childInfo.name}</span>\n                <span className=\"card-item-time\">{childInfo.useTime}ms</span>\n              </div>\n            ))}\n          </CardContent>\n          <Divider />\n          <CardContent>\n            {info.status === 1 ? (\n              <div className=\"result-active-success\">use: {info.useTime}ms</div>\n            ) : (\n              <div className=\"result-active-error\">{info.error}</div>\n            )}\n          </CardContent>\n        </Card>\n      </Grow>\n      <Menu\n        id=\"long-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={showMenu}\n        onClose={handleClose}\n        PaperProps={{\n          style: {\n            width: 120,\n          },\n        }}\n      >\n        <MenuItem onClick={saveCurrentInfo}>SaveDB</MenuItem>\n        <MenuItem onClick={deleteCurrInfo}>Delete</MenuItem>\n      </Menu>\n      <Message\n        visible={messageInfo.visible}\n        type={messageInfo.type}\n        closed={closeMessage}\n        message={messageInfo.message}\n      />\n    </aside>\n  );\n};\n\nexport default MyCard;\n","import React from \"react\";\nimport connect from \"../container/history\";\nimport { TimerDataInfo } from \"../actions/history\";\nimport ResultCard from \"./ResultCard\";\n\ninterface FcProps {\n  historyData: TimerDataInfo[];\n  deleteTimer: (timerInfo: TimerDataInfo) => void;\n}\n\nconst HistoryView: React.FC<FcProps> = ({ historyData, deleteTimer }) => {\n  function saveTimer() {}\n  return (\n    <aside className=\"history-box\">\n      {historyData.map((timerInfo: TimerDataInfo) => (\n        <ResultCard\n          key={timerInfo.id}\n          info={timerInfo}\n          deleteTimer={deleteTimer}\n          saveTimer={saveTimer}\n        />\n      ))}\n    </aside>\n  );\n};\n\nexport default connect(HistoryView);\n","import React from \"react\";\nimport { RouteWithSubRoutes } from \"@/router/index\";\nimport { RouterMap } from \"@/router/types\";\nimport Menu from \"./Menu\";\nimport interpreter from \"@/utils/baseStatement\";\nimport HistoryView from \"@/components/HistoryView\";\nconst MenuList = interpreter.getApiMenuList();\n\nconst Test = ({ routes }: { routes: RouterMap[] }) => {\n  return (\n    <div className={\"api-box\"}>\n      <Menu menuList={MenuList} />\n      <div className={\"api-view\"}>\n        <div className={\"api-context\"}>\n          {routes.map((route: RouterMap, i: number) => (\n            <RouteWithSubRoutes key={i} {...route} />\n          ))}\n        </div>\n        <HistoryView />\n      </div>\n    </div>\n  );\n};\nexport default Test;\n"],"sourceRoot":""}